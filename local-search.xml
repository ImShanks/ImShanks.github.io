<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>缓存穿透，缓存击穿，缓存雪崩区别</title>
    <link href="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p>发现自己有时候明明已经做过了，可能是缺少回顾总结，过了几天这部分知识就会忘的一干二净，一点有记不住，还有这三个概念有时候确实不太能把他分清楚，面试的时候也有让自己说清楚，说的一塌糊涂，所以总结一下</p></blockquote><h2 id="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"><a href="#一、缓存穿透，缓存击穿，缓存雪崩简单的区别" class="headerlink" title="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"></a>一、缓存穿透，缓存击穿，缓存雪崩简单的区别</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会失效，请求都会打到数据库</p><p><strong>缓存击穿</strong>问题也叫做热点key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问回给瞬间的数据库带来巨大的冲击</p><p><strong>缓存雪崩</strong>是指同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><h2 id="二、缓存穿透"><a href="#二、缓存穿透" class="headerlink" title="二、缓存穿透"></a>二、缓存穿透</h2><p>缓存穿透常见的解决方案有两种：</p><h3 id="1-缓存空对象"><a href="#1-缓存空对象" class="headerlink" title="1.缓存空对象"></a>1.缓存空对象</h3><ul><li>优点：实现简单，维护简单</li><li>缺点：额外的内存消耗，可能造成短期的不一致</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919213949.png" alt="微信截图_20230919213949"></p><h3 id="2-布隆过滤"><a href="#2-布隆过滤" class="headerlink" title="2.布隆过滤"></a>2.布隆过滤</h3><ul><li>优点：内存占用较少，没有多余的key</li><li>缺点：实现复杂，存在误判的可能</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214158.png" alt="微信截图_20230919214158"></p><p>3.解决缓存穿透的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(</span><br><span class="hljs-params">          String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallBack,Long time ,TimeUnit unit)</span>&#123;<br>      <span class="hljs-comment">//1.查询缓存</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>      <span class="hljs-comment">//2.判断缓存是否存在</span><br>      <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(Json))&#123;<br>          <span class="hljs-comment">//2.1 如果存在则直接返回数据给用户</span><br>          <span class="hljs-keyword">return</span> JSONUtil.toBean(Json,type);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(Json != <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//3.缓存不存在，查询数据库</span><br>      <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallBack.apply(id);<br>      <span class="hljs-comment">//3.1如果数据库中也不存在，则返回错误信息</span><br>      <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-comment">//将一个“”空字符串直接存到redis中</span><br>          stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-comment">//4.将数据库中的数据存入redis</span><br>     <span class="hljs-built_in">this</span>.set(key,r,time,unit);<br>      <span class="hljs-comment">//5.返回</span><br>      <span class="hljs-keyword">return</span> r;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="三、缓存击穿"><a href="#三、缓存击穿" class="headerlink" title="三、缓存击穿"></a>三、缓存击穿</h2><p>缓存击穿有两种常见的解决方法：</p><h3 id="1-互斥锁"><a href="#1-互斥锁" class="headerlink" title="1.互斥锁"></a>1.互斥锁</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214726.png" alt="微信截图_20230919214726"></p><h3 id="2-逻辑过期"><a href="#2-逻辑过期" class="headerlink" title="2.逻辑过期"></a>2.逻辑过期</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214744.png" alt="微信截图_20230919214744"></p><h3 id="3-两者的优缺点"><a href="#3-两者的优缺点" class="headerlink" title="3.两者的优缺点"></a>3.两者的优缺点</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214832.png" alt="微信截图_20230919214832"></p><h3 id="4-互斥锁的代码实现"><a href="#4-互斥锁的代码实现" class="headerlink" title="4.互斥锁的代码实现"></a>4.互斥锁的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919215243.png" alt="微信截图_20230919215243"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyprefix,String lockKeyPrefix,ID id,Class&lt;R&gt;type,Function&lt;ID,R&gt;dbFallBack,Long time ,TimeUnit unit)</span>  &#123;<br>        <span class="hljs-comment">//1.查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyprefix + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断缓存是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(Json))&#123;<br>            <span class="hljs-comment">//2.1 如果存在则直接返回数据给用户</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(Json,type);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(Json != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//当缓存的内容不是空字符串&quot;&quot;的时候</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2.2 缓存不是空字符串&quot;&quot;，而是不存在时进行缓存重建</span><br>        <span class="hljs-comment">//3.缓存重建</span><br>        <span class="hljs-comment">//3.1获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> lockKeyPrefix +id;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>            <span class="hljs-comment">//3.2判断是否获取互斥锁成功</span><br>            <span class="hljs-keyword">if</span>(!flag)&#123;<br>                <span class="hljs-comment">//获取互斥锁失败</span><br>                <span class="hljs-comment">//3.3失败则休眠并且重试</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-keyword">return</span> queryWithMutex(keyprefix,lockKeyPrefix,id,type,dbFallBack,time,unit);<br>            &#125;<br>            <span class="hljs-comment">//3.4成功则进行查询数据库</span><br>            <span class="hljs-comment">//4.缓存不存在，查询数据库</span><br>            r = dbFallBack.apply(id);<br><br><br>            <span class="hljs-comment">//模拟重建的延时</span><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-comment">//4.1如果数据库中也不存在，则返回错误信息</span><br>            <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">null</span>)&#123;<br>                stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//5.将数据库中的数据存入redis</span><br>            stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(r),time, unit);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放互斥锁</span><br>            unLock(lockKey);<br>        &#125;<br><br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span>&#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-逻辑过期的代码实现"><a href="#5-逻辑过期的代码实现" class="headerlink" title="5.逻辑过期的代码实现"></a>5.逻辑过期的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919220624.png" alt="微信截图_20230919220624"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(</span><br><span class="hljs-params">           String keyprefix,String lockKeyPrefix,ID id,Class&lt;R&gt;type,Function&lt;ID,R&gt;dbFallBack,Long time ,TimeUnit unit)</span>&#123;<br>       <span class="hljs-comment">//1.查询缓存</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyprefix + id;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>       <span class="hljs-comment">//2.判断缓存是否为空</span><br>       <span class="hljs-keyword">if</span>(StrUtil.isBlank(Json))&#123;<br>           <span class="hljs-comment">//Json为空，直接返回给用户null</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-comment">//2.1命中，需要先把json反序列化为对象</span><br>       <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(Json, RedisData.class);<br>       <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>       <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>       <span class="hljs-comment">//2.2判断逻辑时间是否已经过期</span><br>       <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>           <span class="hljs-comment">//expireTime在当前时间之后，说明还没过期</span><br>           <span class="hljs-keyword">return</span> r;<br>       &#125;<br>       <span class="hljs-comment">//3当逻辑时间已经过期,需要缓存重建</span><br>       <span class="hljs-comment">//3.1获取互斥锁</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> lockKeyPrefix + id;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>       <span class="hljs-comment">//判断是否获取锁成功</span><br>       <span class="hljs-keyword">if</span>( flag)&#123;<br>           <span class="hljs-comment">//开启缓存重建,开启独立线程重建</span><br>           CACHE_REBULID_EXECUTOR.submit(()-&gt;&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">//先查数据库</span><br>                   <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallBack.apply(id);<br>                   <span class="hljs-comment">//2.封装逻辑过期时间</span><br>                   RedisData redisData1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>                   redisData1.setData(r1);<br>                   redisData1.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>                   <span class="hljs-comment">//再写入Redis</span><br>                   stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(redisData));<br><br>               &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>               &#125;<span class="hljs-keyword">finally</span> &#123;<br>                   <span class="hljs-comment">//释放锁</span><br>                   unLock(lockKey);<br>               &#125;<br>           &#125;);<br>       &#125;<br>       <span class="hljs-comment">//4.返回</span><br>       <span class="hljs-keyword">return</span> r;<br>   &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 开启锁</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>       <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);<br>       <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 解锁</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span>&#123;<br>       stringRedisTemplate.delete(key);<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、缓存雪崩"><a href="#四、缓存雪崩" class="headerlink" title="四、缓存雪崩"></a>四、缓存雪崩</h2><p>1.<strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>2.<strong>解决方案</strong>:</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/10/28/hello-world/"/>
    <url>/2023/10/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
