<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>JAVA面试-并发篇</title>
    <link href="/2024/01/22/JAVA%E9%9D%A2%E8%AF%95-%E5%B9%B6%E5%8F%91%E7%AF%87/"/>
    <url>/2024/01/22/JAVA%E9%9D%A2%E8%AF%95-%E5%B9%B6%E5%8F%91%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="一、线程和进程的区别"><a href="#一、线程和进程的区别" class="headerlink" title="一、线程和进程的区别?"></a>一、线程和进程的区别?</h3><ul><li>进程是正在运行程序的实例，进程中包含了线程，每个线程执行不同的任务</li><li>不同的进程使用不同的内存空间，在当前进程下的所有线程可以共享内存空间</li><li>线程更轻量，线程上下文切换成本一般上要比进程上下文切换低(上下文切换指的是从一个线程切换到另一个线程)</li></ul><p>线程是CPU调度的最小执行单位，进程是CPU分配资源的最小单位。</p><h3 id="二、并行和并发的区别？"><a href="#二、并行和并发的区别？" class="headerlink" title="二、并行和并发的区别？"></a>二、并行和并发的区别？</h3><p>并发：多个线程轮流使用cpu的过程叫做并发</p><p>并行：多个Cpu同时执行多个线程，叫做并行</p><h3 id="三、创建线程的方式有哪些？"><a href="#三、创建线程的方式有哪些？" class="headerlink" title="三、创建线程的方式有哪些？"></a>三、创建线程的方式有哪些？</h3><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li><li>使用线程池创建线程</li></ul><p><img src="/2024/01/22/JAVA%E9%9D%A2%E8%AF%95-%E5%B9%B6%E5%8F%91%E7%AF%87/image-20240122215145575.png" alt="image-20240122215145575"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA面试-框架篇</title>
    <link href="/2024/01/21/JAVA%E9%9D%A2%E8%AF%95-%E6%A1%86%E6%9E%B6%E7%AF%87/"/>
    <url>/2024/01/21/JAVA%E9%9D%A2%E8%AF%95-%E6%A1%86%E6%9E%B6%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p>ss</p><h3 id="一、Spring框架中的单例Bean是线程安全的吗？"><a href="#一、Spring框架中的单例Bean是线程安全的吗？" class="headerlink" title="一、Spring框架中的单例Bean是线程安全的吗？"></a>一、Spring框架中的单例Bean是线程安全的吗？</h3><ul><li>不是线程安全的</li><li>Spring框架中有一个@Scope注解，默认的值就是singleton，单例的。</li><li>因为一般在spring的bean的中都是注入无状态的对象，没有线程安全问题，如果在bean中定义了可修改的成员变量，是要考虑线程安全问题的，可以使用多例或者加锁来解决</li></ul><h3 id="二、什么是AOP？"><a href="#二、什么是AOP？" class="headerlink" title="二、什么是AOP？"></a>二、什么是AOP？</h3><p>AOP称为面向切面编程，用于将那些与业务无关，但却对多个对象产生影响的公共行为和逻辑，抽取并封装为一个可重用的模块，这个模块被命名为“切面”(Aspect)，减少系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。</p><p>常见的AOP使用场景:</p><ul><li>记录操作日志</li><li>缓存处理</li><li>Spring中内置的事务处理</li></ul><p>定义过程</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">,</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">PARAMETER</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">Log</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.hmdp.mapper"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableAspectJAutoProxy</span>  <span class="token comment">//加上注解才能让切面类生效</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HmDianPingApplication</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">HmDianPingApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.hmdp.annotation.Log)"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodSignature</span> methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> signature<span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Log</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysAspect</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"@annotation(com.hmdp.annotation.Log)"</span><span class="token punctuation">)</span> <span class="token comment">//带有log注解的会被</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pointcut()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>              <span class="token class-name">Signature</span> signature <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MethodSignature</span> methodSignature <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">MethodSignature</span><span class="token punctuation">)</span> signature<span class="token punctuation">;</span>        <span class="token class-name">Method</span> method <span class="token operator">=</span> methodSignature<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>method<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Log</span> annotation <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>annotation<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//原代码执行位置</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="三、Spring中事务失效的场景有哪些？"><a href="#三、Spring中事务失效的场景有哪些？" class="headerlink" title="三、Spring中事务失效的场景有哪些？"></a>三、Spring中事务失效的场景有哪些？</h3><h4 id="情况一：异常捕获场景"><a href="#情况一：异常捕获场景" class="headerlink" title="情况一：异常捕获场景"></a>情况一：异常捕获场景</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Transactional</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> from<span class="token punctuation">,</span> <span class="token class-name">Integer</span> <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//转账的用户不能为空</span>        <span class="token class-name">Account</span> fromAccount <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">selectByld</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//判断用户的钱是否够转账</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromAccount<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            fromAccount<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>fromAccount<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span>updateBylaffromAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//模拟异常</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//被转账的用户</span>            <span class="token class-name">Account</span> toAccount <span class="token operator">=</span>accountDao<span class="token punctuation">.</span><span class="token function">selectByld</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toAccount<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>toAccount<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateByld</span><span class="token punctuation">(</span>toAccount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//解决方法 throw new RuntimeException(e)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>说明：如果在@Transactional发生了异常，异常被方法体直接捕获，没有抛出，事务会回滚失败，事务通知只有捉到了目标抛出的异常，才能进行后续的回滚处理，如果目标自己处理掉异常，事务通知无法知悉。</p><p>解决方法是在catch块添加throw new RuntimeException(e)抛出</p><h4 id="情况二、抛出检测异常"><a href="#情况二、抛出检测异常" class="headerlink" title="情况二、抛出检测异常"></a>情况二、抛出检测异常</h4><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token annotation punctuation">@Transactional</span><span class="token comment">//@Transactional(rollbackFor=Exception.class)  解决方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>lnteger from<span class="token punctuation">,</span> integer <span class="token keyword">to</span><span class="token punctuation">,</span> <span class="token class-name">Double</span> money<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//转账的用户不能为空</span>        <span class="token class-name">Account</span> fromAccount <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">selectByld</span><span class="token punctuation">(</span>from<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断用户的钱是否够转账</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fromAccount<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fromAccount<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>fromAccount<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateByld</span><span class="token punctuation">(</span>fromAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//读取文件</span>            <span class="token keyword">new</span> <span class="token class-name">FilelnputStream</span><span class="token punctuation">(</span><span class="token string">"dddd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//被转账的用户</span>            <span class="token class-name">Account</span> toAccount <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">selectByld</span><span class="token punctuation">(</span><span class="token keyword">to</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            toAccount<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>toAccount<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateByld</span><span class="token punctuation">(</span>toAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>原因：Spring 默认只会回滚非检查异常</p><p>解决方法：配置rollbackFor属性@Transactional(rollbackFor&#x3D;Exception.class)</p><h4 id="情况三、使用非public方法修饰方法会导致事务失效"><a href="#情况三、使用非public方法修饰方法会导致事务失效" class="headerlink" title="情况三、使用非public方法修饰方法会导致事务失效"></a>情况三、使用非public方法修饰方法会导致事务失效</h4><h3 id="四、Spring中Bean的生命周期"><a href="#四、Spring中Bean的生命周期" class="headerlink" title="四、Spring中Bean的生命周期"></a>四、Spring中Bean的生命周期</h3><ul><li>通过BeanDefinition获取Bean的定义信息</li><li>调用构造函数实例化bean</li><li>bean的依赖注入</li><li>处理Aware接囗(BeanNameAware、BeanFactoryAware、ApplicationContextAware)</li><li>Bean的后置处理器BeanPostProcessor-前置</li><li>初始化方法(InitializingBean、init-method)</li><li>Bean的后置处理器BeanPostProcessor-后置</li><li>销毁bean</li></ul><h3 id="五、什么是Spring的循环依赖"><a href="#五、什么是Spring的循环依赖" class="headerlink" title="五、什么是Spring的循环依赖?"></a>五、什么是Spring的循环依赖?</h3><p>Spring中的循环依赖是指两个或多个Bean互相依赖，形成一个循环引用关系。这种情况下，当Spring容器初始化这些Bean时，可能会导致无法正确创建Bean实例的问题。</p><p>解决方法：三级缓存解决循环依赖</p><p><img src="/2024/01/21/JAVA%E9%9D%A2%E8%AF%95-%E6%A1%86%E6%9E%B6%E7%AF%87/image-20240122204205359.png" alt="image-20240122204205359"></p><p>问题：构造方法出现了循环依赖</p><p><img src="/2024/01/21/JAVA%E9%9D%A2%E8%AF%95-%E6%A1%86%E6%9E%B6%E7%AF%87/image-20240122204816549.png" alt="image-20240122204816549"></p><p><img src="/2024/01/21/JAVA%E9%9D%A2%E8%AF%95-%E6%A1%86%E6%9E%B6%E7%AF%87/image-20240122205014828.png" alt="image-20240122205014828"></p><h3 id="六、SpringMVC流程"><a href="#六、SpringMVC流程" class="headerlink" title="六、SpringMVC流程"></a>六、SpringMVC流程</h3><p><img src="/2024/01/21/JAVA%E9%9D%A2%E8%AF%95-%E6%A1%86%E6%9E%B6%E7%AF%87/image-20240122205752127.png" alt="image-20240122205752127"></p><p>首先前端请求过来先访问前端控制器DispatchServlet，然后去处理器映射器查询handler返回给前端控制器，前端控制器发送请求执行handler到处理器适配器HandlerAdaptor（处理参数，处理返回值），处理器适配器发送请求到处理器。</p><h3 id="七、SpringBoot的自动配置原理"><a href="#七、SpringBoot的自动配置原理" class="headerlink" title="七、SpringBoot的自动配置原理"></a>七、SpringBoot的自动配置原理</h3><p>1，在Spring Boot项目中的引导类上有一个注解@SpringBootApplication，这个注解是对三个注解进行了封装，分别是:</p><ul><li>@SpringBootConfiguration</li><li>@EnableAutoConfiguration</li><li>@ComponentScan</li></ul><p>2.其中@EnableAutoConfiquration是实现自动化配置的核心注解。 该注解通过@Import注解导入对应的配置选择器。内部就是读取了该项目和该项目引用的Jar包的的classpath路径下META-INF&#x2F;spring.factories文件中的所配置的类的全类名。 在这些配置类中所定义的Bean会根据条件注解所指定的条件来决定是否需要将其导入到Spring容器中。</p><p>3.条件判断会有像@ConditionalOnClass这样的注解，判断是否有对应的class文件，如果有则加载该类，把这个配置类的所有的Bean放入spring容器中使用。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java面试-JVM篇</title>
    <link href="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/"/>
    <url>/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="1-JVM是什么？"><a href="#1-JVM是什么？" class="headerlink" title="1.JVM是什么？"></a>1.JVM是什么？</h2><p>答：JAVA Virtual Machine  Java程序的运行环境，好处：一次编写，到处运行，自动内存管理和垃圾回收机制</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20231217170913711.png" alt="image-20231217170913711"></p><h2 id="2-JVM由哪些部分组成，运行流程是什么？"><a href="#2-JVM由哪些部分组成，运行流程是什么？" class="headerlink" title="2.JVM由哪些部分组成，运行流程是什么？"></a>2.JVM由哪些部分组成，运行流程是什么？</h2><p>答：</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20231217171028980.png" alt="image-20231217171028980"></p><h2 id="3-什么是程序计数器？"><a href="#3-什么是程序计数器？" class="headerlink" title="3.什么是程序计数器？"></a>3.什么是程序计数器？</h2><p>答：线程私有的，内部保存的字节码的行号。用于记录正在执行的字节码指令的地址。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">javap <span class="token operator">-</span><span class="token class-name">V</span> xx<span class="token punctuation">.</span><span class="token keyword">class</span>打印堆栈大小，局部变量的数量和方法的参数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><h2 id="4-什么Java的堆？"><a href="#4-什么Java的堆？" class="headerlink" title="4.什么Java的堆？"></a>4.什么Java的堆？</h2><p>答：堆是线程共享的区域：主要用来保存对象实例，数组等。</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20231217181838480.png" alt="image-20231217181838480"></p><ul><li><p>年轻代被划分为三部分，Eden区和两个大小严格相同的Survivor区根据JVM的策略，在经过几次垃圾收集后，任然存活于Survivor的对象将被移动到老年代区间</p></li><li><p>老年代主要保存生命周期长的对象，一般是一些老的对象</p></li></ul><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20231217182316042.png" alt="image-20231217182316042"></p><ul><li>1.7中有有一个永久代，存储的是类信息、静态变量、常量、编译后的代码</li><li>1.8移除了永久代，把数据存储到了本地内存的元空间中，防止内存溢出</li></ul><h2 id="5-什么是虚拟机栈？"><a href="#5-什么是虚拟机栈？" class="headerlink" title="5.什么是虚拟机栈？"></a>5.什么是虚拟机栈？</h2><p>Java Virtual machine Stacks (java 虚拟机栈)</p><ul><li>每个线程运行时所需要的内存，称为虚拟机栈，先进后出</li><li>每个栈由多个栈帧 (frame)组成，对应着每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><h3 id="5-1-垃圾回收是否涉及栈内存？"><a href="#5-1-垃圾回收是否涉及栈内存？" class="headerlink" title="5.1 垃圾回收是否涉及栈内存？"></a>5.1 垃圾回收是否涉及栈内存？</h3><p>答：垃圾回收主要指的就是堆内存，栈内存的话，当栈帧弹栈之后，内存就会释放，所以栈内存不需要垃圾回收</p><h3 id="5-2-栈内存分配越大越好吗？"><a href="#5-2-栈内存分配越大越好吗？" class="headerlink" title="5.2 栈内存分配越大越好吗？"></a>5.2 栈内存分配越大越好吗？</h3><p>答：栈帧过大会导致线程数变少，例如，机器总内存为512m，目前能活动的线程数则为512个，如果把栈内存改为2048k，那么能活动的栈帧就会减半</p><h3 id="5-3-方法内的局部变量是否线程安全？"><a href="#5-3-方法内的局部变量是否线程安全？" class="headerlink" title="5.3 方法内的局部变量是否线程安全？"></a>5.3 方法内的局部变量是否线程安全？</h3><ul><li>答：如果方法内局部变量没有逃离方法的作用范围，它是线程安全的</li><li>如果是局部变量引用了对象，并逃离方法的作用范围，需要考虑线程安全</li></ul><h3 id="5-4-什么时候会发生栈内存溢出情况？"><a href="#5-4-什么时候会发生栈内存溢出情况？" class="headerlink" title="5.4 什么时候会发生栈内存溢出情况？"></a>5.4 什么时候会发生栈内存溢出情况？</h3><ul><li>栈帧过多导致栈内存溢出，典型问题:递归调用</li><li>栈帧过大导致栈内存溢出</li></ul><h2 id="6-堆栈的区别是什么？"><a href="#6-堆栈的区别是什么？" class="headerlink" title="6.堆栈的区别是什么？"></a>6.堆栈的区别是什么？</h2><ul><li>栈内存一般会用来存储局部变量和方法调用，但堆内存是用来存储Java对象和数组的的。堆会GC垃圾回收，而栈不会</li><li>栈内存是线程私有的，而堆内存是线程共有的</li><li>两者异常错误不同，但如果栈内存或者堆内存不足都会抛出异常<ul><li>栈空间不足: java.lang.StackOverFlowError。</li><li>堆空间不足:javalang.OutOfMemoryError。</li></ul></li></ul><h2 id="7-什么是方法区？"><a href="#7-什么是方法区？" class="headerlink" title="7.什么是方法区？"></a>7.什么是方法区？</h2><ul><li>方法区(Method Area)是各个线程共享的内存区域</li><li>主要存储类的信息、运行时常量池</li><li>虚拟机启动的时候创建，关闭虚拟机时释放</li><li>如果方法区域中的内存无法满足分配请求，则会抛出OutOfMemoryError: Metaspace</li></ul><h2 id="8-什么是常量池？"><a href="#8-什么是常量池？" class="headerlink" title="8.什么是常量池？"></a>8.什么是常量池？</h2><p>可以看作是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量等信息</p><p>运行时常量池：常量池是*class 文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20231217190155244.png" alt="image-20231217190155244"></p><h2 id="9-什么是直接内存？"><a href="#9-什么是直接内存？" class="headerlink" title="9.什么是直接内存？"></a>9.什么是直接内存？</h2><p>直接内存:并不属于JVM中的内存结构，不由JVM进行管理。是虚拟机的系统内存，常见于 NIO 操作时，用于数据缓冲区，它分配回收成本较高，但读写性能高。</p><p>IO的数据拷贝流程</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20240107215351237.png" alt="image-20240107215351237"></p><p>NIO的数据拷贝流程</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20240107215409518.png" alt="image-20240107215409518"></p><ul><li>并不属于JVM中的内存结构，不由JVM进行管理。是虚拟机的系统内存</li><li>常见于 NIO操作时，用于数据缓冲区，分配回收成本较高，但读写性能高，不受JVM内存回收管理</li></ul><h2 id="10-什么是类加载器，类加载器有哪些？"><a href="#10-什么是类加载器，类加载器有哪些？" class="headerlink" title="10.什么是类加载器，类加载器有哪些？"></a>10.什么是类加载器，类加载器有哪些？</h2><p>10.1 <strong>类加载器</strong>：JVM只会运行二进制文件，类加载器的作用就是将字节码文件加载到JVM中，从而让Java程序能够启动起来。</p><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20240107221506870.png" alt="image-20240107221506870"></p><p>10.2  <strong>类加载器有哪些</strong></p><p>启动类加载器(BootStrap ClassLoader):加载JAVA HOME&#x2F;jre&#x2F;lib目录下的库</p><p>扩展类加载器(ExtClassLoader):主要加载JAVA_HOME&#x2F;jre&#x2F;lib&#x2F;ext目录中的类</p><p>应用类加载器(AppClassLoader):用于加载classPath下的类</p><p>自定义类加载器(CustomizeClassLoader):自定义类继承ClassLoader，实现自定义类加载规则</p><h2 id="11-什么是双亲委派原则"><a href="#11-什么是双亲委派原则" class="headerlink" title="11.什么是双亲委派原则"></a>11.什么是双亲委派原则</h2><p><strong>1.什么是双亲委派模型?</strong><br>加载某一个类，先委托上一级的加载器进行加载，如果上级加载器也有上级，则会继续向上委托，如果该类委托上级没有被加载，子加载器尝试加载该类.。</p><p><strong>2.为什么要用双亲委派机制？</strong></p><ul><li>通过双亲委派机制可以避免某一个类被重复加载，当父类已经加载后则无需重复加载，保证唯一性。</li><li>为了安全，保证类库API不会被修改</li></ul><p><img src="/2023/12/17/Java%E9%9D%A2%E8%AF%95-JVM%E7%AF%87/image-20240107222247873.png" alt="image-20240107222247873"></p><h2 id="12-说一下类装载的执行过程"><a href="#12-说一下类装载的执行过程" class="headerlink" title="12.说一下类装载的执行过程"></a>12.说一下类装载的执行过程</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA面试指南（Redis篇）</title>
    <link href="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/"/>
    <url>/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Redis篇"><a href="#一、Redis篇" class="headerlink" title="一、Redis篇"></a>一、Redis篇</h1><h2 id="1-什么是缓存穿透"><a href="#1-什么是缓存穿透" class="headerlink" title="1.什么是缓存穿透"></a>1.什么是缓存穿透</h2><p><strong>缓存穿透</strong>是指用户查询一个不存在的数据，就是数据库和Redis中都不存在，解决方案的话主要都两个：</p><ul><li>一是缓存空对象到redis<ul><li>实现简单，可能会存在数据不一致的现象</li></ul></li><li>二是用布隆过滤器</li></ul><p><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231216210822369.png" alt="image-20231216210822369"></p><p>布隆过滤器的实现是基于bitmap（以bit位为单位的数组，每个数组是能存储0或1）：将数据的id三次hash，将bitmap中的改为1，这样三个数组就能确定一个数据是否存在，这时让请求来了，会三次hash判断是否存在，这个过程可能会有误判的可能性，恰巧其他key三次hash的结果刚好是这个请求的结果，就会存在误判，确定存在后，就会去查redis，不存在就会去查数据库。</p><h2 id="2-什么是缓存击穿"><a href="#2-什么是缓存击穿" class="headerlink" title="2.什么是缓存击穿"></a>2.什么是缓存击穿</h2><p><strong>缓存击穿</strong>是指给一个热点key设置了过期时间，当key过期的时候，恰好这个时候有对这个key的大量的并发请求，这些并发请求可能会导致数据库崩溃，解决方法有两个。</p><ul><li>一是使用互斥锁<ul><li><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231216211816276.png" alt="image-20231216211816276"></li></ul></li><li>二是利用逻辑过期</li></ul><p><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231216211938922.png" alt="image-20231216211938922"></p><p>互斥锁，强一致性，性能差</p><p>逻辑过期，高可用，性能优，不能保证数据的一致性</p><h2 id="3-什么是缓存雪崩"><a href="#3-什么是缓存雪崩" class="headerlink" title="3.什么是缓存雪崩"></a>3.什么是缓存雪崩</h2><p><strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>解决方案：</p><ul><li>给不同的key的ttL添加随机值</li><li>搭建redis集群提高服务的高可用</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul><h2 id="4-mysql的数据如何与redis进行同步？"><a href="#4-mysql的数据如何与redis进行同步？" class="headerlink" title="4.mysql的数据如何与redis进行同步？"></a>4.mysql的数据如何与redis进行同步？</h2><ul><li>双写一致（对一致性要求比较高）<ul><li>读操作：缓存命中，直接返回；缓存未命中查询数据库，写入缓存，设定超过时间</li><li>写操作：延迟双删</li><li><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231217161011633.png" alt="image-20231217161011633"></li></ul></li><li>双写一致（分布式锁）<ul><li>用读写锁进行控制，<ul><li>共享锁：读锁readLock，加锁之后，其他线程可以共享读操作</li><li>排他锁：独占锁writeLock，加锁之后，阻塞其他线程的读写操作</li><li><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231217161210907.png" alt="image-20231217161210907"></li></ul></li></ul></li><li>异步通知保证数据的最终一致性</li></ul><p><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231217160800296.png" alt="image-20231217160800296"></p><p><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231217160815869.png" alt="image-20231217160815869"></p><h2 id="5-什么是redis的持久化"><a href="#5-什么是redis的持久化" class="headerlink" title="5.什么是redis的持久化"></a>5.什么是redis的持久化</h2><ol><li><p>RDB全称Redis Database Backup file (Redis数据备份文件)，也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。</p><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB 文件fork采用的是copy-on-write技术</p><ul><li>当主进程执行读操作时，访问共享内存</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作</li></ul><p><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231217161929106.png" alt="image-20231217161929106"></p></li><li><p>AOF全称为Append Only File (追加文件)。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p></li><li><p>AOF和RDB的对比</p></li></ol><p><img src="/2023/12/16/JAVA%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/image-20231217162137985.png" alt="image-20231217162137985"></p><h2 id="6-什么是redis的数据过期策略？"><a href="#6-什么是redis的数据过期策略？" class="headerlink" title="6.什么是redis的数据过期策略？"></a>6.什么是redis的数据过期策略？</h2><p>1.惰性删除:设置该key过期时间后，我们不去管它，当需要该key时，我们在检查其是否过期，如果过期，我们就删掉<br>它，反之返回该key。</p><ul><li>优点:对CPU友好，只会在使用该key时才会进行过期检查，对于很多用不到的key不用浪费时间进行过期检查</li><li>缺点:对内存不友好，如果一个key已经过期，但是一直没有使用，那么该key就会一直存在内存中，内存永远不会释放</li></ul><p>2.定期删除:每隔一段时间，我们就对一些key进行检查，删除里面过期的key(从一定数量的数据库中取出一定数量的随<br>机key进行检查，并删除其中的过期key)。</p><ul><li>优点:可以通过限制删除操作执行的时长和频率来减少删除操作对 CPU 的影响。另外定期删除，也能有效释放过期键<br>占用的内存。</li><li>缺点:难以确定删除操作执行的时长和频率</li></ul><h2 id="7-什么是redis的数据淘汰策略？"><a href="#7-什么是redis的数据淘汰策略？" class="headerlink" title="7.什么是redis的数据淘汰策略？"></a>7.什么是redis的数据淘汰策略？</h2><p>数据的淘汰策略: 当Redis中的内存不够用时，此时在向Redis中添加新的key，那么Redis就会按照某一种规则将内存<br>中的数据删除掉，这种数据的删除规则被称之为内存的淘汰策略。</p><ul><li>noeviction: 不淘汰任何key，但是内存满时不允许写入新数据，默认就是这种策略</li><li>volatile-ttl: 对设置了TTL的key，比较key的剩余TTL值，TTL越小越先被淘汰</li><li>allkeys-random:对全体key ，随机进行淘汰</li><li>volatile-random:对设置了TTL的key ，随机进行淘汰</li><li>allkeys-lru: 对全体key，基于LRU算法进行淘汰</li><li>volatile-lru:对设置了TTL的key，基于LRU算法进行淘汰</li><li>allkeys-lfu:对全体key，基于LFU算法进行淘汰</li><li>volatile-lfu: 对设置了TTL的key，基于LFU算法进行淘汰</li></ul><p>LRU(Least Recently Used) 最近最少使用。用当前时间减去最后一次访问时间，这个值越大则淘汰优先级越高</p><p>LFU(Least Frequently Used) 最少频率使用。会统计每个key的访问频率，值越小淘汰优先级越高</p>]]></content>
    
    
    <categories>
      
      <category>面试指南</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶-多线程</title>
    <link href="/2023/12/13/Java%E8%BF%9B%E9%98%B6-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/2023/12/13/Java%E8%BF%9B%E9%98%B6-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="一、相关概念"><a href="#一、相关概念" class="headerlink" title="一、相关概念"></a>一、相关概念</h2><h3 id="1-1程序、进程、线程"><a href="#1-1程序、进程、线程" class="headerlink" title="1.1程序、进程、线程"></a>1.1程序、进程、线程</h3><p>程序 (program):为完成特定任务，用某种语言编写的 一组指令的集合。即指一段静态的代码，静态对象。</p><p>进程 (process):程序的一次执行过程，或是正在内存中运行的应用程序。如: 运行中的QQ运行中的网易音乐播放器。</p><ul><li><p>每个进程都有一个独立的内存空间，系统运行一个程序即是一个进程从创建、运行到消亡的过程。(生命期</p></li><li><p>程序是静态的，进程是动态的。</p></li><li><p>进程作为操作**系统调度和分配资源的最小单位 (亦是系统运行程序的基本单位)**，系统在运行时会为每个进程分配不同的内存区域</p></li><li><p>现代的操作系统，大都是支持多进程的，支持同时运行多个程序。比如: 现在我们上课一边使用编辑器边使用录屏软件，同时还开着画图板，dos窗口等软件。</p></li></ul><p>线程 (thread):进程可进一步细化为线程，是程序内部的 一条执行路径。</p><ul><li>一个进程中至少有一个线程个进程同一时间若并行 执行多个线程，就是支持多线程的</li><li><strong>线程作为 CPU调度和执行的最小单位。</strong></li><li>一个进程中的多个线程共享相同的内存单它们从同一个堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能就会带来安全的隐患</li></ul><p>注意：</p><ul><li>不同进程之间是不共享内存的</li><li>进程之间的数据交换和通信的成本很高</li></ul><h3 id="1-2-并发和并行"><a href="#1-2-并发和并行" class="headerlink" title="1.2 并发和并行"></a>1.2 并发和并行</h3><p>并行 (parallel) : 指两个或多个事件在 同一时刻发生(同时发生)。指在同一时刻，有多条指令 在多个CPU 上同时执行。比如: 多个人同时做不同的事。</p><p>并发 (concurrency) : 指两个或多个事件在同一个时间段内 发生。即在一段时间内，有多条指令在单个CPU上快速轮换、交替执行，使得在宏观上具有多个进程同时执行的效果。</p><h2 id="二、创建和启动线程"><a href="#二、创建和启动线程" class="headerlink" title="二、创建和启动线程"></a>二、创建和启动线程</h2><h3 id="2-1-方式1：继承Thread类"><a href="#2-1-方式1：继承Thread类" class="headerlink" title="2.1 方式1：继承Thread类"></a>2.1 方式1：继承Thread类</h3><ul><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run() —&gt;将此线程要执行的操作，声明在此方法体中</li><li>创建当前Thread的子类的对象</li><li>通过对象调用start()</li></ul><p>代码示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EvenNumberTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ExtendTest</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtendTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ExtendTest</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExtendTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">ExtendTest</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-方式2：实现Runnable接口"><a href="#2-2-方式2：实现Runnable接口" class="headerlink" title="2.2 方式2：实现Runnable接口"></a>2.2 方式2：实现Runnable接口</h3><ul><li>创建一个实现Runnable接口的类</li><li>实现接口中的run() –&gt;将此线程要执行的操作，声明在此方法体中</li><li>创建当前实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的实例</li><li>Thread类的实例调用start(): 1.启动线程 2.调用当前线程的run( )</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">EvenTest</span> e1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EvenTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">EvenTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三、Thread常用方法和生命周期"><a href="#三、Thread常用方法和生命周期" class="headerlink" title="三、Thread常用方法和生命周期"></a>三、Thread常用方法和生命周期</h2><h3 id="3-1-线程常用方法"><a href="#3-1-线程常用方法" class="headerlink" title="3.1 线程常用方法"></a>3.1 线程常用方法</h3><ul><li>start(): 1.启动线程 2.调用线程的run()</li><li>run():将线程要执行的操作，声明在run()中。</li><li>currentThread(:获取当前执行代码对应的线程</li><li>getName(): 获取线程名</li><li>setName(): 设置线程名</li><li>sleep(Long millis):静态方法，调用时，可以使得当前线程睡眠指定的毫秒数</li><li>yield():静态方法，一旦执行此方法，就释放CPU的执行权</li><li>join():在线程a中通过线程b调用join()，意味着线程a进入阳塞状态，直到线程b执行结束，线程a才结束阳塞状态，继续执行</li><li>isAlive():判断当前线程是否存活</li></ul><h3 id="3-2-线程的优先级"><a href="#3-2-线程的优先级" class="headerlink" title="3.2 线程的优先级"></a>3.2 线程的优先级</h3><ul><li>getPriority():获取线程的优先级</li><li>setPriority():设置线程的优先级。范围[1,10]</li></ul><h3 id="3-3-线程的生命周期"><a href="#3-3-线程的生命周期" class="headerlink" title="3.3 线程的生命周期"></a>3.3 线程的生命周期</h3><ul><li>jdk 1.5 之前</li></ul><p><img src="/2023/12/13/Java%E8%BF%9B%E9%98%B6-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20231223224335746.png" alt="image-20231223224335746"></p><ul><li>jdk 1.5 之后</li></ul><p><img src="/2023/12/13/Java%E8%BF%9B%E9%98%B6-%E5%A4%9A%E7%BA%BF%E7%A8%8B/image-20231223224400270.png" alt="image-20231223224400270"></p><h2 id="四、线程的安全问题及解决"><a href="#四、线程的安全问题及解决" class="headerlink" title="四、线程的安全问题及解决"></a>四、线程的安全问题及解决</h2><h3 id="方法1：同步代码块"><a href="#方法1：同步代码块" class="headerlink" title="方法1：同步代码块"></a>方法1：同步代码块</h3><p>代码示例：继承Thread类</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>代码示例：实现Runnable类</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>xwzhang<span class="token punctuation">.</span>safeThread</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Test1</span>  t1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Test1</span>  t2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">Test1</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>ticket<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"：售出"</span><span class="token operator">+</span>ticket<span class="token operator">+</span><span class="token string">"号票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    ticket<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java进阶</tag>
      
      <tag>多线程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶-常用类和API</title>
    <link href="/2023/11/22/Java%E8%BF%9B%E9%98%B6-%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8CAPI/"/>
    <url>/2023/11/22/Java%E8%BF%9B%E9%98%B6-%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%92%8CAPI/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java进阶</tag>
      
      <tag>常用类和API</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM学习记录</title>
    <link href="/2023/11/18/JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/11/18/JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是JVM"><a href="#一、什么是JVM" class="headerlink" title="一、什么是JVM"></a>一、什么是JVM</h1><h3 id="1-定义："><a href="#1-定义：" class="headerlink" title="1.定义："></a>1.定义：</h3><p>JVM(Java Virtual Machine)- java程序的运行环境</p><h3 id="2-好处："><a href="#2-好处：" class="headerlink" title="2.好处："></a>2.好处：</h3><ul><li>一次编写，到处运行</li><li>自动内存管理，垃圾回收功能</li><li>数组下标越界，越界检查</li><li>多态</li></ul><p>比较：</p><p>JVM，JRE ，JDK</p><h3 id="3-JDK和JRE有什么区别？"><a href="#3-JDK和JRE有什么区别？" class="headerlink" title="3.JDK和JRE有什么区别？"></a>3.JDK和JRE有什么区别？</h3><p>JDK（Java Development Kit）：是Java程序开发工具包，包含JRE和开发人员使用的工具</p><ul><li>JDK是用于Java应用程序开发的软件包。</li><li>包含Java编译器（javac）和其他开发工具，用于编译、调试和构建Java应用程序。</li><li>JDK还包括Java类库的完整副本，允许开发人员访问和使用Java标准库中的类和方法。</li><li>JDK中包括开发人员需要的所有工具和资源，以便他们创建、测试和调试Java应用程序。</li></ul><p>JRE（Java Runtime Environment）：是Java程序的运行环境，包含JVM和运行时所需要的核心类库</p><ul><li>JRE是用于在计算机上运行Java应用程序的软件包。</li><li>包含Java虚拟机（JVM）和运行时库，这些组件使得计算机能够执行Java字节码（Java编译后的代码）。</li><li>JRE没有Java编译器或其他开发工具，因此不适合开发Java应用程序，而仅用于运行已编译的Java程序。</li></ul><p>简而言之，JDK是用于Java开发的工具包，包含编译器和开发工具，而JRE是用于在计算机上运行Java应用程序的运行时环境。如果您要编写Java应用程序，您需要安装JDK，但如果只是要运行Java应用程序，那么JRE就足够了。</p><p>JDK&#x3D;JRE+开发工具包</p><p>JRE&#x3D;JVM+JavaSE标准类库</p><h1 id="二、内存结构"><a href="#二、内存结构" class="headerlink" title="二、内存结构"></a>二、内存结构</h1><h2 id="1-程序计数器"><a href="#1-程序计数器" class="headerlink" title="1 程序计数器"></a>1 程序计数器</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><p>程序计数器(Program Counter Register)</p><h3 id="1-2-作用"><a href="#1-2-作用" class="headerlink" title="1.2 作用"></a>1.2 作用</h3><p>记住下一条jvm指定的执行地址</p><h3 id="1-3-特点"><a href="#1-3-特点" class="headerlink" title="1.3 特点"></a>1.3 特点</h3><ul><li>线程私有<ul><li>解释一下，在多线程的环境下，在多个线程并发运行的时候，线程之间切换，每个线程都有自己的程序计数器，用于记录当前运行到哪一条指令，用于线程之间切换能继续之前的指令运行。</li></ul></li><li>不会存在内存溢出</li></ul><h2 id="2-虚拟机栈"><a href="#2-虚拟机栈" class="headerlink" title="2.虚拟机栈"></a>2.虚拟机栈</h2><h3 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h3><p>Java Virtual Machine Stacks （Java虚拟机栈）</p><ul><li>每个线程运行时所需要的内存，成为虚拟机栈</li><li>每个栈由多个栈帧组成，对应每次方法调用时所占用的内存</li><li>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</li></ul><p>问题辨析</p><p>1.垃圾回收是否涉及栈内存？</p><p>不涉及，栈帧内存在每一次方法调用结束后自动回收，完全不需要垃圾回收来管理</p><p>2.栈内存分配越大越好吗？</p><p>栈内存划分过大会导致线程数变少，线程占用内存过高，会导致系统能运行的线程数变少</p><p>3.方法内的局部变量是否线程安全？</p><ul><li>不会，只有共享的数据才会产生线程安全</li><li>如果方法内局部变量没有逃离方法的作用访问，它是线程安全的</li><li>如果时局部变量引用了对象，并逃离方法的作用方法，需要考虑线程安全</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>            <span class="token function">m2</span><span class="token punctuation">(</span>sb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//线程安全</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//线程不安全，因为它被让做入参传入了方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">m2</span><span class="token punctuation">(</span><span class="token class-name">StringBuilder</span> sb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//线程不安全，因为它被返回值返回了</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StringBuilder</span> <span class="token function">m3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-2-栈内存溢出"><a href="#2-2-栈内存溢出" class="headerlink" title="2.2 栈内存溢出"></a>2.2 栈内存溢出</h3><ul><li>栈帧过多导致栈内存溢出</li><li>栈帧过大导致栈内存溢出</li></ul><h3 id="2-3-线程运行诊断"><a href="#2-3-线程运行诊断" class="headerlink" title="2.3 线程运行诊断"></a>2.3 线程运行诊断</h3><p>案例一：cpu占用过多</p><p>定位：（linux中）</p><ul><li>用top命令定位哪个进程对cpu得占用过高</li><li>ps H -eo pid，tid，%cpu | grep 进程id</li><li>jstack指令 + 进程id<ul><li>可以根据线程id找到有问题得进程，进一步定位到问题代码得源码行号</li></ul></li></ul><p>案例二：程序运行很长时间没有结果</p><h2 id="3-本地方法栈"><a href="#3-本地方法栈" class="headerlink" title="3.本地方法栈"></a>3.本地方法栈</h2><p><img src="/2023/11/18/JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20231118163847165.png" alt="image-20231118163847165"></p><p>java虚拟机调用本地方法时，需要为它们提供的方法区，像hashcode( )方法，clone( )方法</p><p>本地方法是c或c++编写的方法，用于对底层的操作系统进行操作</p><h2 id="4-堆"><a href="#4-堆" class="headerlink" title="4.堆"></a>4.堆</h2><h3 id="4-1-定义"><a href="#4-1-定义" class="headerlink" title="4.1 定义"></a>4.1 定义</h3><p>堆（heap）：通过new关键字，创建对象都会使用堆内存</p><h3 id="4-2特点"><a href="#4-2特点" class="headerlink" title="4.2特点"></a>4.2特点</h3><ul><li>它是线程共享的，堆中对象都需要考虑线程安全的问题</li><li>有垃圾回收机制</li></ul><h3 id="4-3-堆内存溢出"><a href="#4-3-堆内存溢出" class="headerlink" title="4.3 堆内存溢出"></a>4.3 堆内存溢出</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*** 堆内存溢出演示*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> demo<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                a <span class="token operator">=</span> a <span class="token operator">+</span>a<span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-4-堆内存诊断"><a href="#4-4-堆内存诊断" class="headerlink" title="4.4 堆内存诊断"></a>4.4 堆内存诊断</h3><p>1.jps工具</p><ul><li>查看当前系统中有哪些Java进程</li></ul><p>2.jmap工具</p><ul><li>查看堆内存占用情况   jmap - heap 进程 id</li></ul><p>3.jconsole工具</p><ul><li>图形界面的，多功能的监测工具，可以连续监测</li></ul><h2 id="5-方法区"><a href="#5-方法区" class="headerlink" title="5.方法区"></a>5.方法区</h2><h3 id="5-1-定义"><a href="#5-1-定义" class="headerlink" title="5.1 定义"></a>5.1 定义</h3><ul><li>方法区是一块内存，用于存储类的元信息，如类的字段、方法信息、构造方法，常量池等。</li><li>方法区在JVM规范中也被称为“永久代”（在Java 7及之前的版本）或“元空间”（在Java 8及之后的版本）</li></ul><h3 id="5-2-组成"><a href="#5-2-组成" class="headerlink" title="5.2 组成"></a>5.2 组成</h3><p><img src="/2023/11/18/JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20231120145843854.png" alt="image-20231120145843854"></p><p><img src="/2023/11/18/JVM%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/image-20231120145849749.png" alt="image-20231120145849749"></p><ul><li><p><strong>运行时常量池（Runtime Constant Pool）</strong>：</p><ul><li>存储类、接口中的常量，包括字符串常量、final常量等。</li><li>运行时常量池在类加载时被创建，与类一起存放在方法区中。</li></ul></li><li><p><strong>字段和方法信息</strong>：</p><ul><li>存储类的字段信息，包括字段的名称、类型、访问修饰符等。</li><li>存储类的方法信息，包括方法的名称、返回类型、参数类型、访问修饰符等。</li></ul></li><li><p><strong>构造方法和普通方法的字节码</strong>：</p><ul><li>存储类的构造方法和普通方法的字节码，即编译后的中间代码。</li></ul></li><li><p><strong>类变量&#x2F;静态变量</strong>：</p><ul><li>存储被声明为static的变量。</li></ul></li><li><p><strong>常量</strong>：</p><ul><li>存储在类中被声明为final的常量。</li></ul></li><li><p><strong>运行时类型信息</strong>：</p><ul><li>存储类的泛型信息，即泛型的类型参数。</li></ul></li><li><p><strong>动态生成的代理类和动态生成的字节码</strong>：</p><ul><li>在运行期间由Java字节码生成的类信息。</li></ul></li></ul><p>注意：在Java 8及之后的版本中，元空间取代了永久代，方法区的实现发生了变化。元空间不再使用传统的固定大小的内存，而是使用本地内存。元空间中的内存由操作系统动态分配，因此不再受到永久代大小的限制。</p><h3 id="5-3-方法区内存溢出"><a href="#5-3-方法区内存溢出" class="headerlink" title="5.3 方法区内存溢出"></a>5.3 方法区内存溢出</h3><p>代码演示</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo1_8</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoader</span> <span class="token punctuation">&#123;</span><span class="token comment">//可以用来加载类的二进制字节码</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Demo1_8</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo1_8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// CIasswriter 作用是生成类的二进制字节码</span>                <span class="token class-name">Classwriter</span> cw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Classwriter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 版本号，public，类名，包名，父类，接口</span>                <span class="token class-name">Cw</span><span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">V1_8</span><span class="token punctuation">,</span><span class="token class-name">Opcodes</span><span class="token punctuation">.</span><span class="token constant">ACC_PUBLIC</span><span class="token punctuation">,</span><span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token string">"java/lang/0bject"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//返回 byte[]</span>                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> code <span class="token operator">=</span> cw<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 执行了类的加载</span>                test<span class="token punctuation">.</span><span class="token function">defineClass</span><span class="token punctuation">(</span> <span class="token string">"Class"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> code<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> code<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-4-运行时常量池"><a href="#5-4-运行时常量池" class="headerlink" title="5.4 运行时常量池"></a>5.4 运行时常量池</h3><ul><li>常量池，就是一张表，虚拟机指令根据这张常量表找到要执行的类目、方法名、参数类型、字面量等信息</li><li>运行时常量池，常量池是*.class 文件中的，当该类被加载，它的常量池信息就会放入运行时常量池，并把里面的符号地址变为真实地址</li></ul>]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>事务失效问题</title>
    <link href="/2023/11/17/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/"/>
    <url>/2023/11/17/%E4%BA%8B%E5%8A%A1%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id><a href="#" class="headerlink" title></a></h2><h3 id="1-方法不是public修饰"><a href="#1-方法不是public修饰" class="headerlink" title="1.方法不是public修饰"></a>1.方法不是public修饰</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Nullable</span><span class="token keyword">protected</span> <span class="token class-name">TransactionAttribute</span> computeTransactionAttributeMethod method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> targetClass<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token comment">// Dont allow non-public methods， as configured.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">allowPublicMethodsOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isPublic</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-非事务方法调用本类中事务方法"><a href="#2-非事务方法调用本类中事务方法" class="headerlink" title="2.非事务方法调用本类中事务方法"></a>2.非事务方法调用本类中事务方法</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//准备订单数据</span><span class="token comment">//生成订单并扣减库存</span>        <span class="token function">insertOrderAndReduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertOrderAndReduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//生成T单</span>        <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 减库存</span>        <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-异常被捕获"><a href="#3-异常被捕获" class="headerlink" title="3.异常被捕获"></a>3.异常被捕获</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//准备订单数据</span>        <span class="token comment">//生成订单</span><span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//减库存</span><span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token comment">//扣库存</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         <span class="token comment">//处理异常</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-回滚异常类型不匹配"><a href="#4-回滚异常类型不匹配" class="headerlink" title="4.回滚异常类型不匹配"></a>4.回滚异常类型不匹配</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//准备订单数据</span>        <span class="token comment">//生成订单</span>        <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//扣减库存</span>        <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IOException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-事务传播行为错误"><a href="#5-事务传播行为错误" class="headerlink" title="5.事务传播行为错误"></a>5.事务传播行为错误</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Transactional</span>    <span class="token keyword">public</span> voi<span class="token operator">/</span>生成订单d <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//生成订单</span>        <span class="token function">insertOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 减库存</span>        <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"业务异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>propagation <span class="token operator">=</span> <span class="token class-name">Propagation</span><span class="token punctuation">.</span><span class="token constant">REQUIRES_NEW</span><span class="token punctuation">)</span>  <span class="token comment">//开启一个新事务</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">reduceStock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure>]]></content>
    
    
    <categories>
      
      <category>项目实战</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>事务</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>netty</title>
    <link href="/2023/11/11/netty/"/>
    <url>/2023/11/11/netty/</url>
    
    <content type="html"><![CDATA[<h1 id="Netty学习之NIO基础"><a href="#Netty学习之NIO基础" class="headerlink" title="Netty学习之NIO基础"></a>Netty学习之NIO基础</h1><p>NIO：（non-blocking IO） 非阻塞IO</p><h2 id="一-NIO的三大组件"><a href="#一-NIO的三大组件" class="headerlink" title="一.NIO的三大组件"></a>一.NIO的三大组件</h2><h3 id="1-1-Channel-Buffer"><a href="#1-1-Channel-Buffer" class="headerlink" title="1.1  Channel &amp; Buffer"></a>1.1  Channel &amp; Buffer</h3><ul><li><strong>channel</strong>有一点类似于stream，它就是读写数据的双向通道，可以从 channel 将数据读入 buffer，也可以将buffer的数据写入 channel，而之前的 stream 要么是输入，要么是输出，channel比 stream 更为底层</li><li>常见的Channel有<ul><li>FileChannel</li><li>DatagramChannel</li><li>SocketChannel</li><li>ServerSocketChannel</li></ul></li><li>buffer用来缓冲读写数据</li><li>常见的buffer有<ul><li>ByteBuffer<ul><li>MappedByteBuffer</li><li>DirectByteBuffer</li><li>HeapByteBuffer</li></ul></li><li>ShortBuffer</li><li>IntBuffer</li><li>FloatBuffer</li><li>DoubleBuffer</li><li>CharBuffer</li></ul></li></ul><h3 id="1-2-Selector"><a href="#1-2-Selector" class="headerlink" title="1.2 Selector"></a>1.2 Selector</h3><p>多线程版设计：一个线程管理一个socket，这就会造成内存占用高，线程上下文切换成本高，只适合连接数少的场景</p><p><img src="/2023/11/11/netty/image-20231111215721103.png" alt="image-20231111215721103"></p><p>线程池版设计：一个线程处理多个socket服务端请求，这就会造成，在阻塞模式下，线程仅能处理一个socket连接，仅适合短连接场景，短连接的意思就是，一个请求结束后马上断开连接，让线程处理下一个连接。</p><p><img src="/2023/11/11/netty/image-20231111215732659.png" alt="image-20231111215732659"></p><p>Selector设计：selector的作用就是配合一个线程来管理多个Channel，获取这些channel上发生的事件，这些channel工作在非阻塞模式下，不会让线程吊死在一个channel上。适合连接数特别多，但流量低的场景。（流量低的意思是一个channel不会发送特别多的请求，否则selector会只处理这一个channel的请求）</p><p><img src="/2023/11/11/netty/image-20231111214039070.png" alt="image-20231111214039070"></p>]]></content>
    
    
    <categories>
      
      <category>网络编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Netty</tag>
      
      <tag>RPC框架</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶-IO流</title>
    <link href="/2023/11/09/Java%E8%BF%9B%E9%98%B6-IO%E6%B5%81/"/>
    <url>/2023/11/09/Java%E8%BF%9B%E9%98%B6-IO%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、File类"><a href="#一、File类" class="headerlink" title="一、File类"></a>一、File类</h2><p>1.绝对路径：以windows操作系统为例，包括盘符在内的文件或文件目录的完整路径。</p><p>2.相对路径：相对于某一个文件目录来讲的相对的位置</p><ul><li>在IDEA中，如果使用单元测试方法，相对于当前的module来讲</li><li>​  如果是在main方法中：相对于当前的project来讲</li></ul><h2 id="二、JAVA-IO原理"><a href="#二、JAVA-IO原理" class="headerlink" title="二、JAVA IO原理"></a>二、JAVA IO原理</h2><h3 id="2-1-Java-IO原理"><a href="#2-1-Java-IO原理" class="headerlink" title="2.1 Java IO原理"></a>2.1 Java IO原理</h3><ul><li><p>I&#x2F;O流中的I&#x2F;O是<code>Input/Output</code>的缩写， I&#x2F;O技术是非常实用的技术，用于处理设备之间的数据传输。如读&#x2F;写文件，网络通讯等。</p><ul><li><p><code>输入input</code>：读取外部数据（磁盘、光盘等存储设备的数据）到程序（内存）中。</p></li><li><p><code>输出output</code>：将程序（内存）数据输出到磁盘、光盘等存储设备中。</p></li></ul></li></ul><h3 id="2-2-流的分类"><a href="#2-2-流的分类" class="headerlink" title="2.2 流的分类"></a>2.2 流的分类</h3><p><code>java.io</code>包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过<code>标准的方法</code>输入或输出数据。</p><ul><li><p>按数据的流向不同分为：<strong>输入流</strong>和<strong>输出流</strong>。</p><ul><li><strong>输入流</strong> ：把数据从<code>其他设备</code>上读取到<code>内存</code>中的流。 <ul><li>以InputStream、Reader结尾</li></ul></li><li><strong>输出流</strong> ：把数据从<code>内存</code> 中写出到<code>其他设备</code>上的流。<ul><li>以OutputStream、Writer结尾</li></ul></li></ul></li><li><p>按操作数据单位的不同分为：<strong>字节流（8bit）</strong>和<strong>字符流（16bit）</strong>。</p><ul><li><strong>字节流</strong> ：以字节为单位，读写数据的流。<ul><li>以InputStream、OutputStream结尾</li></ul></li><li><strong>字符流</strong> ：以字符为单位，读写数据的流。<ul><li>以Reader、Writer结尾</li></ul></li></ul></li><li><p>根据IO流的角色不同分为：<strong>节点流</strong>和<strong>处理流</strong>。</p><ul><li><p><strong>节点流</strong>：直接从数据源或目的地读写数据</p></li><li><p><strong>处理流</strong>：不直接连接到数据源或目的地，而是“连接”在已存在的流（节点流或处理流）之上，通过对数据的处理为程序提供更为强大的读写功能。</p></li></ul></li></ul><h3 id="2-3-FileReader和FileWriter的使用（处理字符流文件）"><a href="#2-3-FileReader和FileWriter的使用（处理字符流文件）" class="headerlink" title="2.3 FileReader和FileWriter的使用（处理字符流文件）"></a>2.3 FileReader和FileWriter的使用（处理字符流文件）</h3><p>FileReader输入示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>       <span class="token comment">//输入的文件</span>       <span class="token class-name">File</span> file <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"a.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">FileReader</span> fileReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  cbuffers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> len <span class="token punctuation">;</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span> fileReader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuffers<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>cbuffers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>FileWriter输出示例：</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span> <span class="token punctuation">;</span>     <span class="token keyword">try</span><span class="token punctuation">&#123;</span>         <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"info.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>         fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"I love U"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"You Love him"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>fw<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span>                 fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>FileReader和FileWriter代码示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**  * 需求：复制一份hello.txt文件，命名为hello_copy.txt  */</span> <span class="token annotation punctuation">@Test</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token class-name">FileReader</span> fr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token class-name">FileWriter</span> fw <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//1. 创建File类的对象</span>         <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello_copy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//2. 创建输入流和输出流</span>         fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>         fw <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//3.数据的读入和写出的过程</span>         <span class="token keyword">char</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> cbuffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> len <span class="token punctuation">;</span> <span class="token comment">//记录每次读入到cbuffer中的字符的个数</span>         <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>fr<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>cbuffer<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             fw<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cbuffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>         <span class="token comment">//关闭流资源</span>         <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>             fw<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                 fr<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                 e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-4-FileInputStream和FileOutputStream的使用-处理字节流文件"><a href="#2-4-FileInputStream和FileOutputStream的使用-处理字节流文件" class="headerlink" title="2.4 FileInputStream和FileOutputStream的使用(处理字节流文件)"></a>2.4 FileInputStream和FileOutputStream的使用(处理字节流文件)</h3><p>FileInputStream和FileOutputStream代码示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span> srcFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"image-20231108211530851.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">File</span> destFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"image-20231108211530851_copy.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>srcFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                fos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>文本文件： .txt 、.java 、 .c 、 .cpp</p><p>非文本文件： .doc   、 .xls  、 .jpg  、.pdf</p><h2 id="三、缓冲流"><a href="#三、缓冲流" class="headerlink" title="三、缓冲流"></a>三、缓冲流</h2><h3 id="3-1-缓冲流的作用"><a href="#3-1-缓冲流的作用" class="headerlink" title="3.1 缓冲流的作用"></a>3.1 缓冲流的作用</h3><p>提升文件读写的效率</p><h3 id="3-2缓冲流的分类"><a href="#3-2缓冲流的分类" class="headerlink" title="3.2缓冲流的分类"></a>3.2缓冲流的分类</h3><p>处理非文本文件的字节流：</p><ul><li>BufferedInputStream     read(byte[ ] buffer)</li><li>BufferOutputStream      write(byte[ ] buffer,0,len)</li></ul><p>处理文本文件的字符流</p><ul><li>BufferedReader    read(char[ ] cBuffer)</li><li>BufferedWriter      write(char[ ]cBuffer,0,len)</li></ul><p>BufferedInputStream和 BufferedOutputStream代码示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> src <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"image-20231108211530851.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> destsrc<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"image-20231108211530851_copy1.png"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>destsrc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len <span class="token operator">=</span> bis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            bos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"复制成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//由于外层流的关闭也会自动的对内层的流进行关闭操作。所以可以省略内层流的关闭。</span>        bos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        fos.close();</span><span class="token comment">//        fis.close();</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>BufferedReader和BufferedWriter示例</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"heep.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">File</span> file1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"heep_copy.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">BufferedReader</span> bufferedReader <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token class-name">BufferedWriter</span> bufferedWriter <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>file1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> data <span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>data<span class="token operator">=</span> bufferedReader<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>         bufferedWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token operator">+</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>     bufferedReader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     bufferedWriter<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四、转换流"><a href="#四、转换流" class="headerlink" title="四、转换流"></a>四、转换流</h2><h3 id="4-1-转换流的作用"><a href="#4-1-转换流的作用" class="headerlink" title="4.1 转换流的作用"></a>4.1 转换流的作用</h3><p>实现字节和字符之间的转换</p><h3 id="4-2-转换流的API"><a href="#4-2-转换流的API" class="headerlink" title="4.2 转换流的API"></a>4.2 转换流的API</h3><ul><li><p>InputStreamReader：将一个输入型的字节流转换为输入型的字符流</p><ul><li><h3 id="InputStreamReader"><a href="#InputStreamReader" class="headerlink" title="InputStreamReader:"></a>InputStreamReader:</h3><code>InputStreamReader</code>是一个连接字节流到字符流的桥梁。它将<code>InputStream</code>（字节流）转换为<code>Reader</code>（字符流）。这是有用的，因为有时你可能需要从字节流中读取字符数据，比如从文件或网络中读取文本数据。</li></ul></li><li><p>OutputStreamWriter：将一个输出型的字符流转换为输出型的字节流</p><ul><li><h3 id="OutputStreamWriter"><a href="#OutputStreamWriter" class="headerlink" title="OutputStreamWriter:"></a>OutputStreamWriter:</h3><code>OutputStreamWriter</code>是一个连接字符流到字节流的桥梁。它将<code>Writer</code>（字符流）转换为<code>OutputStream</code>（字节流）。这在写入文本数据到文件或网络时非常有用。</li></ul></li></ul><p><img src="/2023/11/09/Java%E8%BF%9B%E9%98%B6-IO%E6%B5%81/image-20231121115927306.png" alt="image-20231121115927306"></p><h3 id="4-3-代码示例"><a href="#4-3-代码示例" class="headerlink" title="4.3 代码示例"></a>4.3 代码示例</h3><p>InputStreamReader:</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"example.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Reader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> data <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> character <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">;</span>    <span class="token comment">// 处理字符</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>character<span class="token punctuation">)</span><span class="token punctuation">;</span>    data <span class="token operator">=</span> reader<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>OutputStreamWriter:</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">OutputStream</span> outputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Writer</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>outputStream<span class="token punctuation">,</span> <span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> data <span class="token operator">=</span> <span class="token string">"Hello, OutputStreamWriter!"</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="五、对象流"><a href="#五、对象流" class="headerlink" title="五、对象流"></a>五、对象流</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IO流</tag>
      
      <tag>Java进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis进阶</title>
    <link href="/2023/11/08/redis%E8%BF%9B%E9%98%B6/"/>
    <url>/2023/11/08/redis%E8%BF%9B%E9%98%B6/</url>
    
    <content type="html"><![CDATA[<h2 id="一、Redis持久化"><a href="#一、Redis持久化" class="headerlink" title="一、Redis持久化"></a>一、Redis持久化</h2><h3 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h3><p>RDB全称Redis Database Backup file (Redis数据备份文件)，也被叫做Redis数据快照。简单来说就是把内存中的所有数据都记录到磁盘中。当Redis实例故障重启后，从磁盘读取快照文件，恢复数据。</p><p>快照文件称为RDB文件，默认是保存在当前运行目录。</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">save <span class="token comment">#由Redis主进程来执行RDB，会阻塞所有命令</span>bgsave <span class="token comment">#开启子进程执行RDB，避免主进程受到影响</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>Redis停机前会执行一次RDB</p><h4 id="1-1-bgsave"><a href="#1-1-bgsave" class="headerlink" title="1.1 bgsave"></a>1.1 bgsave</h4><p>bgsave开始时会fork主进程得到子进程，子进程共享主进程的内存数据。完成fork后读取内存数据并写入 RDB文件。</p><p>fork采用的是copy-on-write技术</p><ul><li>当主进程执行读操作时，访问共享内存</li><li>当主进程执行写操作时，则会拷贝一份数据，执行写操作</li></ul><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108190726167.png" alt="image-20231108190726167"></p><h3 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h3><p>AOF全称为Append 0nly File (追加文件)。Redis处理的每一个写命令都会记录在AOF文件，可以看做是命令日志文件。</p><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108193503288.png" alt="image-20231108193503288"></p><p>AOF默认是关闭的，需要修改redis.conf配置文件来开启AOF</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#是否开启AOF功能，默认是no</span>appendonly <span class="token function">yes</span><span class="token comment"># AOF文件的名称"</span>appendfilename  <span class="token string">"appendonly.aof"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>AOF的命令记录的频率也可以通过redis.conf文件来配</p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#表示每执行一次写命令，立即记录到AOF文件</span>appendfsync always<span class="token comment"># 写命令执行完先放入AOF缓冲区，然后表示每隔1秒将缓冲区数据写到AOF文件，是默认方案</span>appendfsync everysec<span class="token comment">#写命令执行完先放入AOF缓冲区，由操作系统决定何时将缓冲区内容写回磁盘</span>appendfsync no<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108200721665.png" alt="image-20231108200721665"></p><h4 id="2-1-bgrewriteaof"><a href="#2-1-bgrewriteaof" class="headerlink" title="2.1  bgrewriteaof"></a>2.1  bgrewriteaof</h4><p>因为是记录命令，AOF文件会比RDB文件大的多。而且AOF会记录对一个key的多次写操作，但只有最后一次写操作才有意义。通过执行bgrewriteaof命令，可以让AOF文件执行重写功能，用最少的命令达到相同效果。</p><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108201202419.png" alt="image-20231108201202419"></p><h3 id="3-AOF和RDB对比"><a href="#3-AOF和RDB对比" class="headerlink" title="3.AOF和RDB对比"></a>3.AOF和RDB对比</h3><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108201411092.png" alt="image-20231108201411092"></p><h2 id="二、Redis主从"><a href="#二、Redis主从" class="headerlink" title="二、Redis主从"></a>二、Redis主从</h2><h3 id="1-数据同步原理"><a href="#1-数据同步原理" class="headerlink" title="1.数据同步原理"></a>1.数据同步原理</h3><p>主从的第一次同步是全量同步：</p><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108203347471.png" alt="image-20231108203347471"></p><p>master如何判断slave是不是第一次来同步数据? 这里会用到两个很重要的概念:</p><ul><li>Replication d:简称replid，是数据集的标记，id一致则说明是同一数据集。每一个master都有唯一的replidslave则会继承master节点的replid</li><li>offset:偏移量，随着记录在repl baklog中的数据增多而逐渐增大。slave完成同步时也会记录当前同步的offset.如果slave的offset小于master的offset，说明slave数据落后于master，需要更新</li></ul><p>因此slave做数据同步，必须向master声明自己的replication id 和offset，master才可以判断到底需要同步哪些数据</p><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108203841860.png" alt="image-20231108203841860"></p><h3 id="2-增量同步原理"><a href="#2-增量同步原理" class="headerlink" title="2.增量同步原理"></a>2.增量同步原理</h3><p>主从第一次同步是全量同步但如果slave重启后同步，则执行增量同步</p><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108205030363.png" alt="image-20231108205030363"></p><h3 id="3-优化redis主从同步集群："><a href="#3-优化redis主从同步集群：" class="headerlink" title="3.优化redis主从同步集群："></a>3.优化redis主从同步集群：</h3><ul><li>在master中配置repl-diskless-sync yes启用无磁盘复制，避免全量同步时的磁盘10。</li><li>Redis单节点上的内存占用不要太大，减少RDB导致的过多磁盘I0</li><li>适当提高repl baklog的大小，发现slave宕机时尽快实现故障恢复，尽可能避免全量同步</li><li>限制一个master上的slave节点数量，如果实在是太多slave，则可以采用主-从-从链式结构，减少master压力</li></ul><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108205246131.png" alt="image-20231108205246131"></p><h2 id="三、Redis哨兵"><a href="#三、Redis哨兵" class="headerlink" title="三、Redis哨兵"></a>三、Redis哨兵</h2><h3 id="1-哨兵的作用"><a href="#1-哨兵的作用" class="headerlink" title="1.哨兵的作用"></a>1.哨兵的作用</h3><p>Redis提供了哨兵(Sentinel) 机制来实现主从集群的自动故障恢复。哨兵的结构和作用如下：</p><ul><li><strong>监控:</strong> Sentinel会不断检查您的master和slave是否按预期工作</li><li>**自动故障恢复:**如果master故障，Sentinel会将个slave提升为master。当故障实例恢复后也以新的master为主</li><li>**通知:**Sentinel充当Redis客户端的服务发现来源，当集群发生故障转移时，会将最新信息推送给Redis的客户端</li></ul><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108205714403.png" alt="image-20231108205714403"></p><h3 id="2-服务状态监控"><a href="#2-服务状态监控" class="headerlink" title="2.服务状态监控"></a>2.服务状态监控</h3><p>Sentinel基于心跳机制监测服务状态，每隔1秒向集群的每个实例发送ping命令:</p><ul><li>主观下线:如果某sentinel节点发现某实例未在规定时间响应，则认为该实例主观下线</li><li>客观下线:若超过指定数量(quorum)的sentinel都认为该实例主观下线，则该实例客观下线。quorum值最好超过Sentinel实例数量的一半。</li></ul><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108205851624.png" alt="image-20231108205851624"></p><h3 id="3-选举新的master"><a href="#3-选举新的master" class="headerlink" title="3.选举新的master"></a>3.选举新的master</h3><p>一旦发现master故障，sentinel需要在salve中选择一个作为新的master，选择依据是这样的:</p><ul><li>首先会判断slave节点与mater节点断开时间长短，如果超过指定值(down-after-milliseconds* 10)则会排除该slave节点</li><li>然后判断slave节点的slave-priority值，越小优先级越高，如果是0则永不参与选举</li><li>如果slave-prority一样，则判断slave节点的offset值，越大说明数据越新，优先级越高</li><li>最后是判断slave节点的运行id大小，越小优先级越高。</li></ul><h3 id="4-如何实现故障转移"><a href="#4-如何实现故障转移" class="headerlink" title="4.如何实现故障转移"></a>4.如何实现故障转移</h3><p>当选中了其中一个slave为新的master后 (例如slave1)，故障的转移的步骤如下：</p><ul><li>sentinel给备选的slave1节点发送slaveof no one命令，让该节点成为master。</li><li>sentinel给所有其它slave发送slaveof192.1681501017002命令，让这些slave成为新master的从节点，开始从新的master上同步数据。</li><li>最后，sentinel将故障节点标记为slave，当故障节点恢复后会自动成为新的master的slave节点。</li></ul><p><img src="/2023/11/08/redis%E8%BF%9B%E9%98%B6/image-20231108210241329.png" alt="image-20231108210241329"></p>]]></content>
    
    
    <categories>
      
      <category>缓存数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-进阶篇</title>
    <link href="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <url>/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="一-MyISAM和InnoDB区别"><a href="#一-MyISAM和InnoDB区别" class="headerlink" title="一.MyISAM和InnoDB区别"></a>一.MyISAM和InnoDB区别</h3><ul><li><p>InnoDB 支持行级别的锁粒度，MyISAM 不支持，只支持表级别的锁粒度。</p></li><li><p>MyISAM 不提供事务支持。InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别。</p></li><li><p>MyISAM 不支持外键，而 InnoDB 支持。</p></li><li><p>MyISAM 不支持 MVCC，而 InnoDB 支持。</p></li><li><p>虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。</p></li><li><p>MyISAM 不支持数据库异常崩溃后的安全恢复，而 InnoDB 支持。</p></li><li><p>InnoDB 的性能比 MyISAM 更强大。</p></li><li><p><strong>lnnoDB</strong>:是Mysal的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</p></li><li><p><strong>MyISAM</strong>:如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。    MyISAM目前有替换品MongoDB</p></li><li><p><strong>MEMORY</strong>:将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。   MEMORY目前也有替换品那就是Redis</p></li></ul><h3 id="二-索引"><a href="#二-索引" class="headerlink" title="二.索引"></a>二.索引</h3><h4 id="1：索引的概念"><a href="#1：索引的概念" class="headerlink" title="1：索引的概念"></a>1：索引的概念</h4><p>索引(index)是帮助MySQL高效获取数据的数据结构(有序。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><ul><li>索引会占据磁盘空间，索引可以提高查询效率，但是会降低更新数据的效率</li></ul><h4 id="2：索引的结构"><a href="#2：索引的结构" class="headerlink" title="2：索引的结构"></a>2：索引的结构</h4><p>按照数据结构维度划分：</p><ul><li>B+Tree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</li><li>哈希索引：类似键值对的形式，一次即可定位。</li><li>R-Tree 索引（空间索引）：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li></ul><p>按照底层存储方式角度划分：</p><ul><li>聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。  <strong>聚集索引指向的是数据</strong></li><li>非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。  <strong>二级索引指向的是索引</strong></li></ul><p>按照应用维度划分：</p><ul><li>主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。</li><li>普通索引：仅加速查询。</li><li>唯一索引：加速查询 + 列值唯一（可以有 NULL）。</li><li>覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</li><li>联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230922210947.png"></p><h4 id="3-InnoDB的默认索引结构是什么？（面试问过）"><a href="#3-InnoDB的默认索引结构是什么？（面试问过）" class="headerlink" title="3.InnoDB的默认索引结构是什么？（面试问过）"></a>3.InnoDB的默认索引结构是什么？（面试问过）</h4><p>InnoDB 存储引擎的默认索引结构是B+树（B-tree），它用于加速数据库表的查询操作。这种索引结构支持高效的数据插入、删除和查找操作，是MySQL中常用的索引类型之一。</p><p>为什么不用B树要用B+树？</p><ul><li><strong>更适合范围查询</strong>：B+树的叶子节点都连接成一个有序链表，这使得范围查询非常高效，因为数据在物理存储上是有序的。而B树在范围查询时可能需要进行额外的跳跃操作，效率较低。</li><li><strong>更好的磁盘IO性能</strong>：B+树的树高相对较低，因此在进行插入和删除操作时需要更少的磁盘IO。B树在树高相对较高时可能需要更多的IO操作，这会降低性能。</li><li><strong>更好的顺序访问性能</strong>：由于B+树的叶子节点形成有序链表，顺序访问数据更加高效。这对于某些查询和扫描操作非常重要。</li><li><strong>索引占用更少的内存</strong>：B+树的内部节点不保存数据记录的引用，只保存键值和子节点的信息，因此相比于B树，B+树索引占用更少的内存。</li></ul><h3 id="三-索引失效的情况"><a href="#三-索引失效的情况" class="headerlink" title="三.索引失效的情况"></a>三.索引失效的情况</h3><ol><li><strong>未使用索引列</strong>：当查询中的条件不是索引列时，索引将失效。例如，如果你有一个名为”age”的索引，但查询是基于名字而不是年龄的，索引将无效。</li><li><strong>使用函数或表达式</strong>：如果在查询中对列使用函数、表达式或计算，索引可能会失效。例如，<code>WHERE YEAR(date_column) = 2023</code> 可能导致索引失效，因为它对日期列进行了函数计算。</li><li><strong>模糊查询</strong>：模糊查询（如使用通配符%）通常会导致索引失效，因为数据库无法有效地利用索引来匹配通配符的位置。</li><li><strong>不等于条件</strong>：在某些情况下，使用不等于条件（例如，<code>!=</code> 或 <code>&lt;&gt;</code>）可能导致索引失效，因为它们不是等值条件。</li><li><strong>OR条件</strong>：包含多个OR条件的查询可能会导致索引失效，特别是这些条件没有被合理地组织。</li><li><strong>列顺序</strong>：索引的列顺序也很重要。如果查询的列顺序与索引的列顺序不匹配，索引可能会失效。</li><li><strong>大数据范围查询</strong>：在大数据表上执行范围查询（例如，大于、小于、介于等）可能会导致索引失效，因为数据库可能需要扫描大量的索引页。</li></ol><p>解决索引失效的方法包括：</p><ul><li>确保查询中使用了适当的索引列，并避免在索引列上使用函数或表达式。</li><li>优化查询语句，尽量避免模糊查询和OR条件。</li><li>确保索引的列顺序与查询中的列顺序匹配。</li><li>使用合适的索引类型（例如，B-tree、Hash、Full-text等），取决于查询的需求。</li><li>定期重新评估数据库的索引策略，根据实际查询模式进行调整</li></ul><h3 id="四、SQL优化"><a href="#四、SQL优化" class="headerlink" title="四、SQL优化"></a>四、SQL优化</h3><h4 id="1-insert优化"><a href="#1-insert优化" class="headerlink" title="1.insert优化"></a>1.insert优化</h4><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#批量插入Insert into tb test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;),(3,erry&#39;);# 手动提交事务                                    start transaction:insert into tb_test values(1,&#39;Tom&#39;),(2,&#39;Cat&#39;),(3,Jerry&#39;);insert into tb_test values(4,&#39;Tom&#39;),(5,&#39;Cat&#39;),(6,Jerry&#39;);                                    insert into tb_test values(7,&#39;Tom&#39;),(8,&#39;Cat&#39;),(9,erry&#39;);commit;#主键顺序插入<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>1.1<strong>大批量插入数据:</strong></p><p>如果一次性需要插入大批量数据，使用inset语句插入性能较低，此时可以使用MySOL数据库提供的load指令进行插入。操作如下:</p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108211530851.png" alt="image-20231108211530851"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108211703774.png" alt="image-20231108211703774"></p><h4 id="2-主键优化"><a href="#2-主键优化" class="headerlink" title="2.主键优化"></a>2.主键优化</h4><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108212004326.png" alt="image-20231108212004326"></p><ul><li><p><strong>页分裂</strong></p><ul><li>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据多大，会行溢出)，根据主键排列。</li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108212152281.png" alt="image-20231108212152281"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108212256058.png" alt="image-20231108212256058"></p></li><li><p><strong>页合并</strong></p><ul><li>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记(flaged)为删除并且它的空间变得允许被其他记录声明使用。</li><li>当页中删除的记录达到 MERGE THRESHOLD(默认为页的50%)，nnoDB会开始寻找最靠近的页(前或后)看看是否可以将两个页合并以优化空间使用。</li></ul></li></ul><p><strong>主键设计原则</strong></p><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO INCREMENT自增主键</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号</li><li>业务操作时，尽量减少对主键的修改</li></ul><h4 id="3-order-by优化"><a href="#3-order-by优化" class="headerlink" title="3.order by优化"></a>3.order by优化</h4><ul><li>Using filesort:通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区sort buffer中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort排序</li><li>Using index:通过有序索引顺序扫描直接返回有序数据，这种情况即为using index，不需要额外排序，操作效率高。</li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108213117868.png" alt="image-20231108213117868"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108213131153.png" alt="image-20231108213131153"></p><ul><li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则。</li><li>尽量使用覆盖索引。</li><li>多字段排序,一个升序一个降序，此时需要注意联合索引在创建时的规则(ASC&#x2F;DESC)。</li><li>如果不可避免的出现filesot，大数据量排序时，可以适当增大排序缓冲区大小 sort buffer size(默认256k)。</li></ul><h4 id="4-group-by-优化"><a href="#4-group-by-优化" class="headerlink" title="4.group by 优化"></a>4.group by 优化</h4><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108213733246.png" alt="image-20231108213733246"></p><h4 id="5-limit优化"><a href="#5-limit优化" class="headerlink" title="5.limit优化"></a>5.limit优化</h4><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108214100629.png" alt="image-20231108214100629"></p><h4 id="6-count优化"><a href="#6-count优化" class="headerlink" title="6.count优化"></a>6.count优化</h4><ul><li>MYISAM引擎把一个表的总行数存在了磁盘上，因此执行count(<em>)的时候会直接返回这个数，效率很高</em></li><li><em>innoDB引擎就麻烦了，它执行 count(</em>)的时候，需要把数据一行一行地从引擎里面读出来，然后累积计数。</li><li>优化思路: 自己计数。</li></ul><h4 id="7-update优化"><a href="#7-update优化" class="headerlink" title="7.update优化"></a>7.update优化</h4><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231108215023149.png" alt="image-20231108215023149"></p><h3 id="五、锁"><a href="#五、锁" class="headerlink" title="五、锁"></a>五、锁</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><ul><li>介绍<ul><li>锁是计算机协调多个进程或线程并发访问某一资源的机制。在数据库中，除传统的计算资源(CPU、RAM、I&#x2F;O)的争用以外，数据也是-种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</li></ul></li><li>分类<ul><li>全局锁:锁定数据库中的所有表</li><li>表级锁:每次操作锁住整张表。</li><li>行级锁:每次操作锁住对应的行数据</li></ul></li></ul><h4 id="2-全局锁"><a href="#2-全局锁" class="headerlink" title="2.全局锁"></a>2.全局锁</h4><ul><li><p>介绍</p><ul><li><p>全局锁就是对整个数据库实例加锁，加锁后整个实例就处于只读状态，后续的DML的写语句，DDL语句，已经更新操作的事务提交语句都将被阻塞。</p></li><li><p>其典型的使用场景是做全库的逻辑备份，对所有的表进行锁定，从而获取一致性视图，保证数据的完整性。</p></li></ul></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#加全局锁语句flush tables with read lock;#备份mysqldump -u root -p 123456 itcast &gt; itcast.sql#解锁unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li><p>特点</p><p>数据库中加全局锁，是一个比较重的操作，存在以下问题:</p><ul><li>如果在主库上备份，那么在备份期间都不能执行更新，业务基本上就得停摆</li><li>如果在从库上备份，那么在备份期间从库不能执行主库同步过来的二进制日志(binlog)，会导致主从延迟</li></ul></li></ul><h4 id="3-表级锁"><a href="#3-表级锁" class="headerlink" title="3.表级锁"></a>3.表级锁</h4><p>介绍</p><p>表级锁，每次操作锁住整张表。锁定细粒度大，发生锁冲突的概率最高，并发度最低。应用在MyISAM，InnoDB，BDB等存储引擎中。</p><p>对于表级锁，主要分为一下三类：</p><ul><li>表锁<ol><li>表共享读锁(read lock)</li><li>表独占写锁(write lock)</li></ol></li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">#表加锁(读锁)只能读lock tables socre read;#表解锁unlock tables;#表加锁(写锁) 当前客户端可以读写，其他客户端不能读写lock tables socre write;#表解锁unlock tables;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231109144554516.png" alt="image-20231109144554516"></p><ul><li>元数据锁</li></ul><p>MDL加锁过程是系统自动控制，无需显式使用，在访问一张表的时候会自动加上。MDL锁主要作用是维护表元数据的数据一致性，在表<br>上有活动事务的时候，不可以对元数据进行写入操作。为了避免DML与DDL冲突，保证读写的正确性。</p><p>在MySQL5.5中引入了MDL，当对一张表进行增删改查的时候，加MDL读锁(共享)，当对表结构进行变更操作的时候，加MDL写锁(排他)。</p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231109144712930.png" alt="image-20231109144712930"></p><ul><li>意向锁</li></ul><ol><li>意向共享锁 (IS): 由语句 select …lock in share mode添加。</li><li>意向排他锁 (IX) : 由insert、update、delete、select …for update 添加。</li></ol><h4 id="4-行级锁"><a href="#4-行级锁" class="headerlink" title="4.行级锁"></a>4.行级锁</h4><ul><li>介绍</li></ul><p>行级锁，每次操作锁住对应的行数据。锁定粒度最小，发生锁冲突的概率最低，并发度最高。应用在InnoDB存储引擎中。</p><p>InnoDB的数据是基于索引组织的，行锁是通过对索引上的索引项加锁来实现的，而不是对记录加的锁。对于行级锁，主要分为以下三类</p><ul><li>行锁(Record Lock): 锁定单个行记录的锁，防止其他事务对此行进行update和delete。在RC、RR隔离级别下都支持。</li><li>间隙锁(Gap lock):锁定索引记录间隙(不含该记录)，确保索引记录间隙不变，防止其他事务在这个间隙进行insert，产生幻读。在RR隔离级别下都支持</li><li>临键锁(Next-KeyLock):行锁和间隙锁组合，同时锁住数据，并锁住数据前面的间隙Gap。在RR隔离级别下支持。</li></ul><p>行锁</p><p>InnoDB实现了以下两种类型的行锁:</p><ol><li>共享锁(S):允许一个事务去读一行，阻止其他事务获得相同数据集的排它锁。</li><li>排他锁(X):允许获取排他锁的事务更新数据，阻止其他事务获得相同数据集的共享锁和排他锁。</li></ol><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231109152233799.png" alt="image-20231109152233799"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231109161227579.png" alt="image-20231109161227579"></p><ul><li><p>行锁-演示</p><ul><li>默认情况下，innoDB在 REPEATABLE READ事务隔离级别运行，InnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读。针对唯一索引进行检索时，对已存在的记录进行等值匹配时，将会自动优化为行锁</li><li>InnoDB的行锁是针对于索引加的锁，不通过索引条件检索数据，那么innoDB将对表中的所有记录加锁，此时 就会升级为表锁。</li></ul></li><li><p>间隙锁&#x2F;临键锁-演示</p><p>默认情况下，innoDB在 REPEATABLE READ事务隔离级别运行，lnnoDB使用 next-key 锁进行搜索和索引扫描，以防止幻读，</p><ul><li>索引上的等值查询(唯一索引)，给不存在的记录加锁时，优化为间隙锁</li><li>索引上的等值查询(普通索引)，向右遍历时最后一个值不满足查询需求时，next-keylock 退化为间隙锁</li><li>索引上的范围查询(唯一索引)，会访问到不满足条件的第一个值为止。</li></ul></li></ul><h3 id="六、InnoDB引擎–架构"><a href="#六、InnoDB引擎–架构" class="headerlink" title="六、InnoDB引擎–架构"></a>六、InnoDB引擎–架构</h3><h4 id="6-1-内存结构"><a href="#6-1-内存结构" class="headerlink" title="6.1 内存结构"></a>6.1 内存结构</h4><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110132534184.png" alt="image-20231110132534184"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110134652772.png" alt="image-20231110134652772"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110134720451.png" alt="image-20231110134720451"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110134738553.png" alt="image-20231110134738553"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110134751578.png" alt="image-20231110134751578"></p><h4 id="6-2-磁盘结构"><a href="#6-2-磁盘结构" class="headerlink" title="6.2 磁盘结构"></a>6.2 磁盘结构</h4><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110140850941.png" alt="image-20231110140850941"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110144014907.png" alt="image-20231110144014907"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110144101408.png" alt="image-20231110144101408"></p><h4 id="6-3-后台线程"><a href="#6-3-后台线程" class="headerlink" title="6.3 后台线程"></a>6.3 后台线程</h4><h5 id="1-Master-Thread"><a href="#1-Master-Thread" class="headerlink" title="1.Master Thread"></a>1.Master Thread</h5><p>核心后台线程，负责调度其他线程，还负责将缓冲池中的数据异步刷新到磁盘中,保持数据的一致性，还包括脏页的刷新、合并插入缓存、undo页的回收</p><h5 id="2-IO-Thread"><a href="#2-IO-Thread" class="headerlink" title="2.IO Thread"></a>2.IO Thread</h5><p>在InnoDB存储引擎中大量使用了AIO来处理IO请求,这样可以极大地提高数据库的性能，而IOThread主要负责这些lO请求的回调。</p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110150815462.png" alt="image-20231110150815462"></p><h5 id="3-Purge-Thread"><a href="#3-Purge-Thread" class="headerlink" title="3.Purge Thread"></a>3.Purge Thread</h5><p>主要用于回收事务已经提交了的undo log，在事务提交之后，undo og可能不用了，就用它来回收</p><h5 id="4-Page-Cleaner-Thread"><a href="#4-Page-Cleaner-Thread" class="headerlink" title="4.Page Cleaner Thread"></a>4.Page Cleaner Thread</h5><p>协助 Master Thread 刷新脏页到磁盘的线程，它可以减轻 Master Thread 的工作压力，减少阻塞。</p><h3 id="七、InnoDB引擎–事务原理"><a href="#七、InnoDB引擎–事务原理" class="headerlink" title="七、InnoDB引擎–事务原理"></a>七、InnoDB引擎–事务原理</h3><h5 id="7-1事务原理"><a href="#7-1事务原理" class="headerlink" title="7.1事务原理"></a>7.1事务原理</h5><p>事务：事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有的操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p><p>特性：</p><ul><li>原子性(Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性(Consistency): 事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation): 数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li><li>持久性(Durability): 事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h5 id="7-2-redolog"><a href="#7-2-redolog" class="headerlink" title="7.2 redolog"></a>7.2 redolog</h5><p>重做日志，记录的是事务提交时数据页的物理修改，是用来实现事务的持久性。</p><p>该日志文件由两部分组成:重做日志缓冲(redolog buffer)以及重做日志文件(redo log file),前者是在内存中，后者在磁盘中。当事务提交之后会把所有修改信息都存到该日志文件中,用于在刷新脏页到磁盘,发生错误时，进行数据恢复使用。</p><h5 id="7-3-undo-log"><a href="#7-3-undo-log" class="headerlink" title="7.3 undo log"></a>7.3 undo log</h5><ul><li>回滚日志，用于记录数据被修改前的信息，作用包含两个:提供回滚 和 MVCC(多版本并发控制)。</li><li>undo log和redo log记录物理日志不一样，它是逻辑日志。可以认为当delete一条记录时，undolog中会记录一条对应的insert记录，反之亦然，当update一条记录时，它记录一条对应相反的update记录。当执行rollback时，就可以从undo log中的逻辑记录读取到相应的内容并进行回滚。</li><li>Undo log销毁:undolog在事务执行时产生，事务提交时，并不会立即删除undo log，因为这些日志可能还用于MVCC</li><li>Undo og存储:undo log采用段的方式进行管理和记录，存放在前面介绍的 rollback segment 回滚段中，内部包含1024个undo log<br>segment。</li></ul><h3 id="八、InnoDB引擎-MVCC"><a href="#八、InnoDB引擎-MVCC" class="headerlink" title="八、InnoDB引擎-MVCC"></a>八、InnoDB引擎-MVCC</h3><ul><li><p>当前读</p><ul><li>读取的是记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁。对于我们日常的操作，如:select … lock in share mode(共享锁)，select …for update、 update、insert、delete(排他锁)都是一种当前读。</li></ul></li><li><p>快照读</p><p>简单的select(不加锁)就是快照读，快照读，读取的是记录数据的可见版本，有可能是历史数据，不加锁，是非阻塞读。</p><ul><li>Read Committed:每次select，都生成一个快照读。</li><li>Repeatable Read: 开启事务后第一个select语句才是快照读的地方。</li><li>Serializable:快照读会退化为当前读。</li></ul></li><li><p>MVCC</p><ul><li>全称 Multi-Version Concurrency ontrol，多版本并发控制。指维护一个数据的多个版本，使得读写操作没有冲突，快照读为MYSQL实现MVCC提供了一个非阻塞读功能。MVCC的具体实现，还需要依赖于数据库记录中的三个隐式字段、undo log日志、readView。</li></ul></li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110155330997.png" alt="image-20231110155330997"></p><ul><li><p>undo log</p><ul><li>回滚日志，在insert、update、delete的时候产生的便于数据回滚的日志。</li><li>当insert的时候，产生的undo log日志只在回滚时需要，在事务提交后，可被立即删除。</li><li>而update、delete的时候，产生的undo log日志不仅在回滚时需要，在快照读时也需要，不会立即被删除。</li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110162412979.png" alt="image-20231110162412979"></p></li><li><p>readview</p><ul><li>ReadView(读视图)是 快照读 SQL执行时MVCC提取数据的依据，记录并维护系统当前活跃的事务(未提交的)id。</li><li>ReadView中包含了四个核心字段:</li></ul></li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110163300518.png" alt="image-20231110163300518"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110163510437.png" alt="image-20231110163510437"></p><p>不同的隔离级别，生成ReadView的时机不同</p><ul><li>READ COMMITTED : 在事务中每一次执行快照读时生成Readview。</li><li>REPEATABLE READ: 仅在事务中第一次执行快照读时生成ReadView，后续复用该ReadView。</li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110192255258.png" alt="image-20231110192255258"></p><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/image-20231110192304495.png" alt="image-20231110192304495"></p>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-基础篇</title>
    <link href="/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="一、第一部分"><a href="#一、第一部分" class="headerlink" title="一、第一部分"></a>一、第一部分</h2><h3 id="1-MySQL的名词缩写解释"><a href="#1-MySQL的名词缩写解释" class="headerlink" title="1.MySQL的名词缩写解释"></a>1.MySQL的名词缩写解释</h3><ul><li><p>DML（data manipulation language）数据操纵语言：</p><p>就是我们最经常用到的 SELECT、UPDATE、INSERT、DELETE。 主要用来对数据库的数据进行一些操作。</p></li><li><p>DDL（data definition language）数据库定义语言：</p><p>其实就是我们在创建表的时候用到的一些sql，比如说：CREATE、ALTER、DROP等。DDL主要是用在定义或改变表的结构，数据类型，表之间的链接和约束等初始化工作上</p></li><li><p>DCL（Data Control Language）数据库控制语言：</p><p>是用来设置或更改数据库用户或角色权限的语句，包括（grant,deny,revoke等）语句。这个比较少用到。</p></li></ul><h3 id="2-DDL基础操作语句"><a href="#2-DDL基础操作语句" class="headerlink" title="2.DDL基础操作语句"></a>2.DDL基础操作语句</h3><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># DDL-数据库操作SHOW DATABASES;CREATE DATABASE 数据库名;USE 数据库名;SELECT DATABASE();DROP DATABASE 数据库名;# DDL-表操作SHOW TABLES;CREATE TABLE 表名(字段 字段类型，字段 字段类型 );DESC 表名;SHOW CREATE TABLE 表名ALTER TABLE 表名 ADD&#x2F;MODIFY&#x2F;CHANGE&#x2F;DROP&#x2F;RENAME TO ...;DROP TABLE 表名;# 添加数据INSERT INTO 表名(字段1, 字段2,...) VALUES(值1, 值2,...)[,(值1,值2,...) ...];# 修改数据UPDATE 表名 SET 字段1 &#x3D; 值1,字段2&#x3D; 值2 [WHERE 条件];# 删除数据DELETE FROM 表名[WHERE 条件];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-DQL基础操作语句"><a href="#3-DQL基础操作语句" class="headerlink" title="3.DQL基础操作语句"></a>3.DQL基础操作语句</h3><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># DQL-基本查询1.查询多个字段SELECT 字段1,字段2,字段3 ... FROM 表名;SELECT*FROM 表名;2.设置别名SELECT 字段1 [AS 别名1],字段2 [AS 别名2] ... FROM 表名;3.去除重复记录SELECT DISTINCT 字段列表 FROM 表名；# DQL-条件查询SELECT 字段列表 FROM 表名 WHERE 条件列表;1.查询年龄等于88的员工Select * from tb_ employee where age &#x3D; 88;2.查询年龄小于20的员工信息Select *from tb_ employee where age&lt;20;3.查询有身份证证号的员工信息Select *from tb_employee where idcard is not null;4.查询年龄在15岁（包含）到20岁（包含）之间的员工信息SELECT *from tb_employee where age&gt;&#x3D;15 and age&lt;&#x3D;20;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="4-DQL-聚合函数"><a href="#4-DQL-聚合函数" class="headerlink" title="4.DQL-聚合函数"></a>4.DQL-聚合函数</h3><h4 id="4-1-介绍"><a href="#4-1-介绍" class="headerlink" title="4.1. 介绍"></a>4.1. 介绍</h4><p>将一列数据作为一个整体，进行纵向计算。</p><h4 id="4-2-常见聚合函数"><a href="#4-2-常见聚合函数" class="headerlink" title="4.2 常见聚合函数"></a>4.2 常见聚合函数</h4><table><thead><tr><th align="center">函数</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">count</td><td align="center">统计数量</td></tr><tr><td align="center">max</td><td align="center">最大值</td></tr><tr><td align="center">min</td><td align="center">最小值</td></tr><tr><td align="center">avg</td><td align="center">平均值</td></tr><tr><td align="center">sum</td><td align="center">求和</td></tr></tbody></table><h4 id="4-3-聚合函数操作语句"><a href="#4-3-聚合函数操作语句" class="headerlink" title="4.3 聚合函数操作语句"></a>4.3 聚合函数操作语句</h4><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.统计该企业员工数量：Select count(*) from tb_ employee;统计所有的员工的数量Select count(id_ card)from tb_ employee;统计有身份证的数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-DQL-分组查询"><a href="#5-DQL-分组查询" class="headerlink" title="5.DQL-分组查询"></a>5.DQL-分组查询</h3><h4 id="4-1-语法"><a href="#4-1-语法" class="headerlink" title="4.1 语法"></a>4.1 语法</h4><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">SELECT 字段列表 FROM 表名[WHERE 条件] GROUP BY 分组字段名[HAVING 分组后过滤条件];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h4 id="4-2-where和having的区别"><a href="#4-2-where和having的区别" class="headerlink" title="4.2 where和having的区别"></a>4.2 where和having的区别</h4><ul><li>执行时机不同: where是分组之前进行过滤，不满足where条件，不参与分组;而having是分组之后对结果进行过滤。</li><li>判断条件不同:where不能对聚合函数进行判断，而having可以</li></ul><h4 id="4-3-分组查询操作语句"><a href="#4-3-分组查询操作语句" class="headerlink" title="4.3 分组查询操作语句"></a>4.3 分组查询操作语句</h4><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.根据性别分组，统计男性员工和女性员工的数量Select gender,count(*) from tb_ employee group by gender;2.根据性别分组，统计男性员工和女性员工的平均年龄Select gender,avg(age) from tb_employee group by gender;3.查询年龄小于45的员工，并根据工作地址分组，获取员工数量大于等于3的工作地址Select work_ address ，count(*) from tb_employee where age&lt;45 group by work_address;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="6-DQL-排序查询"><a href="#6-DQL-排序查询" class="headerlink" title="6.DQL-排序查询"></a>6.DQL-排序查询</h3><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.语法SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1,字段2 排序方式2;2.排序方式ASC:升序(默认值)DESC:降序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="7-DQL-分页查询"><a href="#7-DQL-分页查询" class="headerlink" title="7.DQL-分页查询"></a>7.DQL-分页查询</h3><p>注意：起始索引从0开始，起始索引 &#x3D; (查询页码-1)* 每页显示记录数分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。如果查询的是第一页数据，起始索引可以省略，直接简写为 limit 10。</p><figure><div class="code-wrapper"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 语法SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数1.查询第一页员工数据，每页展示10条记录SELECT *from tb_employee limit 0,10;2.查询第二页员工数据，每页展示10条数据SELECT *from tb_employee limit 10,10;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="8"><a href="#8" class="headerlink" title="8."></a>8.</h3><h2 id="二、第二部分"><a href="#二、第二部分" class="headerlink" title="二、第二部分"></a>二、第二部分</h2><h3 id="1-事务的四大特性（ACID）"><a href="#1-事务的四大特性（ACID）" class="headerlink" title="1.事务的四大特性（ACID）"></a>1.事务的四大特性（ACID）</h3><ul><li>原子性 (Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性 (Consistency) : 事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation):数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability): 事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="2-并发事务问题"><a href="#2-并发事务问题" class="headerlink" title="2.并发事务问题"></a>2.并发事务问题</h3><ul><li>脏读（Dirty Read）：<ul><li>脏读是指一个事务读取了另一个事务尚未提交的数据。</li><li>想象一家银行，某人正在进行取款操作，但还没有完成整个事务。同时，另一个人查看了该账户余额，看到了取款事务中的临时减少，尽管最终可能会被取消。这个过程就像读取了“脏数据”，因为它可能是不准确的。</li></ul></li><li>幻读（Phantom Read）：<ul><li>幻读是指一个事务在两次查询之间，另一个事务插入了新的数据行，导致第一个事务看到了一个似乎出现了“幻影”数据的情况。</li><li>假设一个医院管理系统中有一个正在查看某个科室的病人数量的事务。当事务开始时，有10名患者，但在事务期间，另一个事务添加了一名新患者，导致第一个事务看到了11名患者，就好像出现了“幻影”患者一样。</li><li>假如另一个事务在id&#x3D;3的地方插入数据，然后我当前事务，就是我查的时候显示id&#x3D;3明明没有数据，插入的时候却显示已经存在</li></ul></li><li>不可重复读（Non-repeatable Read）：<ul><li>不可重复读是指在同一个事务中，两次读取相同数据时，第二次读取得到的数据与第一次读取不同，这是由于其他事务修改了数据。</li><li>假设一个网上商店的顾客正在查看购物车中的商品数量。当他第一次查看时，有5件商品。然后，在他下订单之前，另一个顾客购买了2件相同的商品，导致他第二次查看购物车时，商品数量变成了3件。这就是不可重复读，因为同一事务中的两次读取返回了不同的结果。</li></ul></li></ul><h5 id="幻读和不可重复读的区别"><a href="#幻读和不可重复读的区别" class="headerlink" title="幻读和不可重复读的区别"></a>幻读和不可重复读的区别</h5><ol><li>幻读（Phantom Read）：<ul><li>幻读通常与数据行的插入或删除操作有关。它发生在一个事务在两次查询之间，另一个事务插入了新的数据行，导致第一个事务看到了一个似乎出现了“幻影”数据的情况。</li><li>幻读强调的是在事务期间其他事务添加或删除了数据，从而导致看到不一致的结果。</li></ul></li><li>不可重复读（Non-repeatable Read）：<ul><li>不可重复读通常与数据行的更新操作有关。它发生在一个事务在两次查询之间，另一个事务修改了已经存在的数据行，导致第一个事务在两次读取之间看到不同的数据。</li><li>不可重复读强调的是在事务期间其他事务修改了数据，导致读取到的数据不一致。</li></ul></li></ol><h3 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3.事务隔离级别"></a>3.事务隔离级别</h3><p><img src="/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230921162142.png"></p><ol><li>读未提交（Read Uncommitted）：<ul><li>最低的隔离级别，允许一个事务读取另一个事务未提交的数据。</li><li>可能出现脏读、幻读和不可重复读等问题。</li></ul></li><li>读已提交（Read Committed）：<ul><li>允许一个事务只能读取已提交的数据，确保不会读取到未提交的数据。</li><li>虽然可以避免脏读，但仍然可能发生幻读和不可重复读。</li></ul></li><li>可重复读（Repeatable Read）：<ul><li>事务内的多次读取都会看到相同的数据快照，即使其他事务修改了数据也不会影响。</li><li>可以避免脏读和不可重复读，但仍然可能发生幻读。</li></ul></li><li>序列化（Serializable）：<ul><li>最高的隔离级别，确保事务之间没有并发问题，所有事务顺序执行。</li><li>可以避免脏读、幻读和不可重复读，但可能会影响性能。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>基础篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶-数据结构和集合源码</title>
    <link href="/2023/10/28/Java%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    <url>/2023/10/28/Java%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>数据结构，就是一种程序设计优化的方法论，研究数据的、逻辑结构、和物理结构以及它们之间相互关系并对这种结构定义相应的“运算，目的是加快程序的执行速度、减少内存占用的空间。</p><h3 id="1-2研究对象之一：数据间逻辑关系"><a href="#1-2研究对象之一：数据间逻辑关系" class="headerlink" title="1.2研究对象之一：数据间逻辑关系"></a>1.2研究对象之一：数据间逻辑关系</h3><ul><li>集合结构</li><li>线性结构:一对一关系</li><li>树形结构:一对多关系</li><li>图形结构:多对多关系</li></ul><h3 id="1-3-研究对象之二：数据的存储结构"><a href="#1-3-研究对象之二：数据的存储结构" class="headerlink" title="1.3 研究对象之二：数据的存储结构"></a>1.3 研究对象之二：数据的存储结构</h3><ul><li>数组结构</li><li>链式结构</li><li>索引结构</li><li>散列结构</li></ul><h3 id="1-3-研究对象之三：运算结构"><a href="#1-3-研究对象之三：运算结构" class="headerlink" title="1.3 研究对象之三：运算结构"></a>1.3 研究对象之三：运算结构</h3><h2 id="二、常见的存储结构"><a href="#二、常见的存储结构" class="headerlink" title="二、常见的存储结构"></a>二、常见的存储结构</h2><h3 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1  数组"></a>2.1  数组</h3><p>数组（Array）是一种线性数据结构，由一组连续的内存空间组成，用于存储相同类型的数据。数组可以通过索引直接访问任何元素，其读取和写入的时间复杂度均为 O(1)。</p><h3 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h3><p>链表（Linked List）是另一种常见的数据结构，它由一系列节点组成，每个节点包含数据部分和指向下一个节点的指针。链表分为单向链表和双向链表，其优点是可以高效地插入和删除元素，但访问特定位置的元素的时间复杂度较高。</p><h3 id="2-3-树"><a href="#2-3-树" class="headerlink" title="2.3 树"></a>2.3 树</h3><p>树（Tree）是一种层次化的数据结构，由节点和边组成。树结构具有根节点、子节点和父节点等概念。常见的树包括二叉树、二叉搜索树、平衡树等。树结构常用于搜索算法和数据检索中。</p><ul><li>二叉树（Binary Tree）：二叉树是每个节点最多只有两个子节点的树结构。通常分为左子树和右子树。二叉树的子树有左右之分，且次序不能颠倒。</li><li>二叉搜索树（Binary Search Tree）：二叉搜索树是一种特殊的二叉树，其中每个节点的左子树中的值都小于该节点的值，而右子树中的值都大于该节点的值。这使得二叉搜索树成为一种有效的数据结构，用于快速搜索、插入和删除操作。</li><li>平衡树（Balanced Tree）：平衡树是一种树，其中任意节点的两个子树的高度差不大于1。它的目的是为了维护树的平衡，从而保证树的查找、插入和删除等操作的效率。</li><li>B树（B-Tree）：B树是一种自平衡的树结构，通常用于组织文件系统和数据库中的数据。B树具有多个子树，允许每个节点有多个子节点。B树在处理大量数据时表现出良好的性能。</li><li>红黑树（Red-Black Tree）：红黑树是一种自平衡的二叉搜索树，它在每个节点上增加了一个存储位来表示节点的颜色，可以是红色或黑色。红黑树具有一些特定的规则来确保树始终保持平衡，从而保证了较高的性能。</li></ul><h3 id="2-4-栈"><a href="#2-4-栈" class="headerlink" title="2.4 栈"></a>2.4 栈</h3><p>栈（Stack）是一种遵循后进先出（LIFO）原则的数据结构。栈的插入和删除操作均发生在栈顶。常见的栈操作包括压栈（push）和弹栈（pop），用于许多计算机应用程序的实现，如表达式求值、函数调用等。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Stack</span><span class="token punctuation">&#123;</span>  <span class="token comment">//用数组实现</span>    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token punctuation">;</span> <span class="token comment">//记录存储的元素的个数</span>    <span class="token keyword">public</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        valus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//入栈</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">Object</span> ele<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空间已满，入栈失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        values<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>        size <span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//出栈</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">&lt;</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"栈空间已空,出栈失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> values<span class="token punctuation">[</span>size <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        values<span class="token punctuation">[</span>size<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size <span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="2-5队列"><a href="#2-5队列" class="headerlink" title="2.5队列"></a>2.5队列</h3><p>队列（Queue）是一种遵循先进先出（FIFO）原则的数据结构。队列的插入操作（入队）发生在队尾，删除操作（出队）发生在队首。队列常用于处理按顺序进行的任务，如打印任务、CPU任务调度等。</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Queue</span><span class="token punctuation">&#123;</span>  <span class="token comment">//用数组实现</span>    <span class="token class-name">Object</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span>    <span class="token keyword">int</span> size<span class="token punctuation">;</span> <span class="token comment">//记录存储的元素的个数</span>    <span class="token comment">//入队</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Object</span> ele<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">></span> <span class="token operator">=</span> valus<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列已满，添加失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        values<span class="token punctuation">[</span>size<span class="token punctuation">]</span> <span class="token operator">=</span> ele<span class="token punctuation">;</span>         size <span class="token operator">++</span> <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//出队</span>    <span class="token keyword">public</span> <span class="token class-name">Objext</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>size<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"队列已空，获取失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>i<span class="token operator">&lt;</span> size<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//最后一个元素置空</span>        values<span class="token punctuation">[</span>size <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三、List实现类源码分析"><a href="#三、List实现类源码分析" class="headerlink" title="三、List实现类源码分析"></a>三、List实现类源码分析</h2><h3 id="3-1-Arraylist源码解析："><a href="#3-1-Arraylist源码解析：" class="headerlink" title="3.1.Arraylist源码解析："></a>3.1.Arraylist源码解析：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//jdk7.0 版本</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//底层会初始化数组，数组长度的为10</span><span class="token comment">//添加元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//可以添加10个，当满10的时候再添加会默认扩容为原来的1.5倍</span><span class="token comment">//jdk8.0版本</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化数组的时候为空</span><span class="token comment">//添加元素</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//当添加元素的时候会初始化数组，让它的长度为10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-2-Vector源码解析："><a href="#3-2-Vector源码解析：" class="headerlink" title="3.2.Vector源码解析："></a>3.2.Vector源码解析：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//JDK 1.8</span><span class="token class-name">Vector</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//底层初始化数组，长度为10</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//当添加到11个的时候，需要扩容，底层默认扩容2倍</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="3-3-LinkedList-源码解析："><a href="#3-3-LinkedList-源码解析：" class="headerlink" title="3.3. LinkedList 源码解析："></a>3.3. LinkedList 源码解析：</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//没有初始化容量</span>list<span class="token punctuation">,</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将"AA"封装到一个Node对象1中，ist对象的属性first、last都指向此Node对象1。</span><span class="token class-name">List</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"BB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将"BB"封装到一个Node对象2中，对象1和对象2构成一个双向链表，同时last指向此Node对象2</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//因为LinkedList使用的是双向链表，不需要考虑扩容问题</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四、Map实现类源码分析"><a href="#四、Map实现类源码分析" class="headerlink" title="四、Map实现类源码分析"></a>四、Map实现类源码分析</h2><h3 id="4-1-HashMap源码分析"><a href="#4-1-HashMap源码分析" class="headerlink" title="4.1.HashMap源码分析"></a>4.1.HashMap源码分析</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//JDK 1.7</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象的过程中，底层会初始化数组Entry[]table = new Entry[16];</span>map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"AA"和78封装到一个Entry对象中，考虑将此对象添加到table数组中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>添加&#x2F;修改过程</p><p>将(key1,value1)添加到当前的map中:<br>首先，需要调用key1所在类的hashCode()方法，计算key1对应的哈希值1，此哈希值1经过某种算法(hash())之后，得到哈希值2。<br>哈希值2再经过某种算法(indexFor())之后，就确定了(key1,value1)在数组table中的索引位置i。</p><ol><li>​如果此索引位置i的数组上没有元素，则(key1,value1)添加成功。 —-&gt;情况1</li><li>​如果此索引位置i的数组上有元素(key2,value2),则需要继续比较key1和key2的哈希值2 —&gt;哈希冲突<ol><li>如果key1的哈希值2与key2的哈希值2不相同，则(key1,value1)添加成功。—-&gt;情况2</li><li>如果key1哈希值2与key2的哈值2相同，则需要继续比较key1和key2的equaLs()。要调用key1所在类的equals()将key2作为参数传递进去.<ol><li>调用equals()，返回fase: 则(key1,value1)添加成功。—-&gt;情况3</li><li>调用equals()，返回true: 则认为key1和key2是相同的。默认情况下，value1替换原有的value2。</li></ol></li></ol></li></ol><p>说明：情况1:将(key1,value1)存放到数组的索引i的位置<br>            情况2,情况3: (key1,value1)元素与现有的(key2,value2)构成单向链表结构，(key1,value1)指向(key2,value2)</p><p>随着不断的添加元素，在满足如下的条件的情况下，会考虑扩容:</p><p>(size &gt;&#x3D; threshold) &amp;&amp; (null !&#x3D; table[i])</p><p>当元素的个数达到临界值(-&gt;数组的长度 * 加载因子)时，就考虑扩容。默认的临界值 &#x3D; 16*0.75 –&gt; 12.</p><p>默认扩容为原来的2倍</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//jdk 1.8</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建对象的过程中，底层不会初始化table数组</span><span class="token comment">//当首次往map添加key-value值得时候，进行判断如果发现table未初始化，则进行初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>2.2 jdk8与jdk7的不同之处(以jdk1.8._271为例):</p><ol><li>在jdk8中，当我们创建了HashMap实例以后，底层并没有初始化table数组。当首次添加(key,value)时，进行判断如果发现table尚未初始化，则对数组进行初始化。</li><li>在jdk8中，HashMap底层定义了Node内部类，替换jdk7中的Entry内部类。意味着，我们创建的数组是Node[ ]</li><li>在jdk8中，如果当前的(key,value)经过一系列判断之后，可以添加到当前的数组角标i中。如果此时角标i位置上有元素。在jdk7中是将新的(key,value)指向已有的旧的元素(头插法)，而在jdk8中是旧的元素指向新的(key,value)元素(尾插法)。”七上八下”</li><li>jdk7:数组+单向链表<br>jdk8:数组+单向链表+ 红黑树</li></ol><ul><li>什么时候会使用单向链表变为红黑树:如果数组索引i位置上的元素的个数达到8，并且数组的长度达到64时，我们就将此索引i位置上的多个元素改为使用红黑树的结构进行存储。 (为什么修改呢? 红黑树进行put()&#x2F;get()&#x2F;remove操作的时间复杂度为0(logn)，比单向链表的时间复杂度(n)的好。性能更高。</li><li>什么时候会使用红黑树变为单向链表:当使用红黑树的索引i位置上的元素的个数低于6的时候，就会将红黑树结构退化为单向链表</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>集合源码</tag>
      
      <tag>Java进阶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透，缓存击穿，缓存雪崩区别</title>
    <link href="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p>发现自己有时候明明已经做过了，可能是缺少回顾总结，过了几天这部分知识就会忘的一干二净，一点有记不住，还有这三个概念有时候确实不太能把他分清楚，面试的时候也有让自己说清楚，说的一塌糊涂，所以总结一下</p></blockquote><h2 id="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"><a href="#一、缓存穿透，缓存击穿，缓存雪崩简单的区别" class="headerlink" title="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"></a>一、缓存穿透，缓存击穿，缓存雪崩简单的区别</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会失效，请求都会打到数据库</p><p><strong>缓存击穿</strong>问题也叫做热点key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问回给瞬间的数据库带来巨大的冲击</p><p><strong>缓存雪崩</strong>是指同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><h2 id="二、缓存穿透"><a href="#二、缓存穿透" class="headerlink" title="二、缓存穿透"></a>二、缓存穿透</h2><p>缓存穿透常见的解决方案有两种：</p><h3 id="1-缓存空对象"><a href="#1-缓存空对象" class="headerlink" title="1.缓存空对象"></a>1.缓存空对象</h3><ul><li>优点：实现简单，维护简单</li><li>缺点：额外的内存消耗，可能造成短期的不一致</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919213949.png" alt="微信截图_20230919213949"></p><h3 id="2-布隆过滤"><a href="#2-布隆过滤" class="headerlink" title="2.布隆过滤"></a>2.布隆过滤</h3><ul><li>优点：内存占用较少，没有多余的key</li><li>缺点：实现复杂，存在误判的可能</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214158.png" alt="微信截图_20230919214158"></p><p>3.解决缓存穿透的代码实现</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span>ID<span class="token punctuation">></span></span> <span class="token class-name">R</span> <span class="token function">queryWithPassThrough</span><span class="token punctuation">(</span>          <span class="token class-name">String</span> keyPrefix<span class="token punctuation">,</span> <span class="token class-name">ID</span> id<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span> type<span class="token punctuation">,</span> <span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span> dbFallBack<span class="token punctuation">,</span><span class="token class-name">Long</span> time <span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//1.查询缓存</span>      <span class="token class-name">String</span> key <span class="token operator">=</span> keyPrefix <span class="token operator">+</span> id<span class="token punctuation">;</span>      <span class="token class-name">String</span> <span class="token class-name">Json</span> <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//2.判断缓存是否存在</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token class-name">Json</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//2.1 如果存在则直接返回数据给用户</span>          <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token class-name">Json</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Json</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//3.缓存不存在，查询数据库</span>      <span class="token class-name">R</span> r <span class="token operator">=</span> dbFallBack<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//3.1如果数据库中也不存在，则返回错误信息</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//将一个“”空字符串直接存到redis中</span>          stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token constant">CACHE_NULL_TTL</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//4.将数据库中的数据存入redis</span>     <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>r<span class="token punctuation">,</span>time<span class="token punctuation">,</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//5.返回</span>      <span class="token keyword">return</span> r<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="三、缓存击穿"><a href="#三、缓存击穿" class="headerlink" title="三、缓存击穿"></a>三、缓存击穿</h2><p>缓存击穿有两种常见的解决方法：</p><h3 id="1-互斥锁"><a href="#1-互斥锁" class="headerlink" title="1.互斥锁"></a>1.互斥锁</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214726.png" alt="微信截图_20230919214726"></p><h3 id="2-逻辑过期"><a href="#2-逻辑过期" class="headerlink" title="2.逻辑过期"></a>2.逻辑过期</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214744.png" alt="微信截图_20230919214744"></p><h3 id="3-两者的优缺点"><a href="#3-两者的优缺点" class="headerlink" title="3.两者的优缺点"></a>3.两者的优缺点</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214832.png" alt="微信截图_20230919214832"></p><h3 id="4-互斥锁的代码实现"><a href="#4-互斥锁的代码实现" class="headerlink" title="4.互斥锁的代码实现"></a>4.互斥锁的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919215243.png" alt="微信截图_20230919215243"></p><p>代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span>ID<span class="token punctuation">></span></span><span class="token class-name">R</span> <span class="token function">queryWithMutex</span><span class="token punctuation">(</span>            <span class="token class-name">String</span> keyprefix<span class="token punctuation">,</span><span class="token class-name">String</span> lockKeyPrefix<span class="token punctuation">,</span><span class="token class-name">ID</span> id<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span>type<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span>dbFallBack<span class="token punctuation">,</span><span class="token class-name">Long</span> time <span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token comment">//1.查询缓存</span>        <span class="token class-name">String</span> key <span class="token operator">=</span> keyprefix <span class="token operator">+</span> id<span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token class-name">Json</span> <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.判断缓存是否存在</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isNotBlank</span><span class="token punctuation">(</span><span class="token class-name">Json</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//2.1 如果存在则直接返回数据给用户</span>            <span class="token keyword">return</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token class-name">Json</span><span class="token punctuation">,</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">Json</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//当缓存的内容不是空字符串""的时候</span>            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//2.2 缓存不是空字符串""，而是不存在时进行缓存重建</span>        <span class="token comment">//3.缓存重建</span>        <span class="token comment">//3.1获取互斥锁</span>        <span class="token class-name">String</span> lockKey <span class="token operator">=</span> lockKeyPrefix <span class="token operator">+</span>id<span class="token punctuation">;</span>        <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//3.2判断是否获取互斥锁成功</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//获取互斥锁失败</span>                <span class="token comment">//3.3失败则休眠并且重试</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token function">queryWithMutex</span><span class="token punctuation">(</span>keyprefix<span class="token punctuation">,</span>lockKeyPrefix<span class="token punctuation">,</span>id<span class="token punctuation">,</span>type<span class="token punctuation">,</span>dbFallBack<span class="token punctuation">,</span>time<span class="token punctuation">,</span>unit<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//3.4成功则进行查询数据库</span>            <span class="token comment">//4.缓存不存在，查询数据库</span>            r <span class="token operator">=</span> dbFallBack<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//模拟重建的延时</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//4.1如果数据库中也不存在，则返回错误信息</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>r <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token constant">CACHE_NULL_TTL</span><span class="token punctuation">,</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MINUTES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//5.将数据库中的数据存入redis</span>            stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>time<span class="token punctuation">,</span> unit<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//6.释放互斥锁</span>            <span class="token function">unLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//7.返回</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/**     * 开启锁     * @param key     * @return     */</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token constant">LOCK_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">BooleanUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 解锁     * @param key     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h3 id="5-逻辑过期的代码实现"><a href="#5-逻辑过期的代码实现" class="headerlink" title="5.逻辑过期的代码实现"></a>5.逻辑过期的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919220624.png" alt="微信截图_20230919220624"></p><p>代码</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">,</span>ID<span class="token punctuation">></span></span><span class="token class-name">R</span> <span class="token function">queryWithLogicalExpire</span><span class="token punctuation">(</span>           <span class="token class-name">String</span> keyprefix<span class="token punctuation">,</span><span class="token class-name">String</span> lockKeyPrefix<span class="token punctuation">,</span><span class="token class-name">ID</span> id<span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">R</span><span class="token punctuation">></span></span>type<span class="token punctuation">,</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span>ID<span class="token punctuation">,</span><span class="token class-name">R</span><span class="token punctuation">></span></span>dbFallBack<span class="token punctuation">,</span><span class="token class-name">Long</span> time <span class="token punctuation">,</span><span class="token class-name">TimeUnit</span> unit<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">//1.查询缓存</span>       <span class="token class-name">String</span> key <span class="token operator">=</span> keyprefix <span class="token operator">+</span> id<span class="token punctuation">;</span>       <span class="token class-name">String</span> <span class="token class-name">Json</span> <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2.判断缓存是否为空</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token class-name">StrUtil</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span><span class="token class-name">Json</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//Json为空，直接返回给用户null</span>           <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//2.1命中，需要先把json反序列化为对象</span>       <span class="token class-name">RedisData</span> redisData <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token class-name">Json</span><span class="token punctuation">,</span> <span class="token class-name">RedisData</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">R</span> r <span class="token operator">=</span> <span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toBean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span><span class="token punctuation">)</span> redisData<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">LocalDateTime</span> expireTime <span class="token operator">=</span> redisData<span class="token punctuation">.</span><span class="token function">getExpireTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//2.2判断逻辑时间是否已经过期</span>       <span class="token keyword">if</span><span class="token punctuation">(</span>expireTime<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//expireTime在当前时间之后，说明还没过期</span>           <span class="token keyword">return</span> r<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//3当逻辑时间已经过期,需要缓存重建</span>       <span class="token comment">//3.1获取互斥锁</span>       <span class="token class-name">String</span> lockKey <span class="token operator">=</span> lockKeyPrefix <span class="token operator">+</span> id<span class="token punctuation">;</span>       <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//判断是否获取锁成功</span>       <span class="token keyword">if</span><span class="token punctuation">(</span> flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token comment">//开启缓存重建,开启独立线程重建</span>           <span class="token constant">CACHE_REBULID_EXECUTOR</span><span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token punctuation">&#123;</span>               <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//先查数据库</span>                   <span class="token class-name">R</span> r1 <span class="token operator">=</span> dbFallBack<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//2.封装逻辑过期时间</span>                   <span class="token class-name">RedisData</span> redisData1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">RedisData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   redisData1<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>                   redisData1<span class="token punctuation">.</span><span class="token function">setExpireTime</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span>unit<span class="token punctuation">.</span><span class="token function">toSeconds</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">//再写入Redis</span>                   stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span><span class="token class-name">JSONUtil</span><span class="token punctuation">.</span><span class="token function">toJsonStr</span><span class="token punctuation">(</span>redisData<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span><span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>                   <span class="token comment">//释放锁</span>                   <span class="token function">unLock</span><span class="token punctuation">(</span>lockKey<span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>           <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token comment">//4.返回</span>       <span class="token keyword">return</span> r<span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token comment">/**    * 开启锁    * @param key    * @return    */</span>   <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIfAbsent</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token constant">LOCK_SHOP_TTL</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token class-name">BooleanUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span>   <span class="token comment">/**    * 解锁    * @param key    */</span>   <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unLock</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="四、缓存雪崩"><a href="#四、缓存雪崩" class="headerlink" title="四、缓存雪崩"></a>四、缓存雪崩</h2><p>1.<strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>2.<strong>解决方案</strong>:</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2023/10/27/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/27/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="一、常见易混知识"><a href="#一、常见易混知识" class="headerlink" title="一、常见易混知识"></a>一、常见易混知识</h2><h3 id="1-JDK和JRE有什么区别？"><a href="#1-JDK和JRE有什么区别？" class="headerlink" title="1.JDK和JRE有什么区别？"></a>1.JDK和JRE有什么区别？</h3><p>JDK（Java Development Kit）：是Java程序开发工具包，包含JRE和开发人员使用的工具</p><ul><li>JDK是用于Java应用程序开发的软件包。</li><li>包含Java编译器（javac）和其他开发工具，用于编译、调试和构建Java应用程序。</li><li>JDK还包括Java类库的完整副本，允许开发人员访问和使用Java标准库中的类和方法。</li><li>JDK中包括开发人员需要的所有工具和资源，以便他们创建、测试和调试Java应用程序。</li></ul><p>JRE（Java Runtime Environment）：是Java程序的运行环境，包含JVM和运行时所需要的核心类库</p><ul><li>JRE是用于在计算机上运行Java应用程序的软件包。</li><li>包含Java虚拟机（JVM）和运行时库，这些组件使得计算机能够执行Java字节码（Java编译后的代码）。</li><li>JRE没有Java编译器或其他开发工具，因此不适合开发Java应用程序，而仅用于运行已编译的Java程序。</li></ul><p>简而言之，JDK是用于Java开发的工具包，包含编译器和开发工具，而JRE是用于在计算机上运行Java应用程序的运行时环境。如果您要编写Java应用程序，您需要安装JDK，但如果只是要运行Java应用程序，那么JRE就足够了。</p><p>JDK&#x3D;JRE+开发工具包</p><p>JRE&#x3D;JVM+JavaSE标准类库</p><h3 id="2-JVM是什么？"><a href="#2-JVM是什么？" class="headerlink" title="2.JVM是什么？"></a>2.JVM是什么？</h3><p>JVM (Java Virtual Machine ，Java虚拟机) : 是一个虚拟的计算机是Java程序的运行环境。JVM具有指令集并使用不同的存储区域，负责执行指令，管理数据、内存、寄存器。</p><h3 id="3-JAVA中基本和引用数据类型各有哪些？"><a href="#3-JAVA中基本和引用数据类型各有哪些？" class="headerlink" title="3.JAVA中基本和引用数据类型各有哪些？"></a>3.JAVA中基本和引用数据类型各有哪些？</h3><p><strong>基本数据类型</strong>（primitive data types）：</p><ol><li>整数类型：<ul><li>byte：字节，8位，范围为-128到127。</li><li>short：短整数，16位，范围为-32,768到32,767。</li><li>int：整数，32位，范围为-2^31到2^31-1。</li><li>long：长整数，64位，范围为-2^63到2^63-1。</li></ul></li><li>浮点数类型：<ul><li>float：单精度浮点数，32位，通常用于小数，约有6-7位有效数字。</li><li>double：双精度浮点数，64位，通常用于小数，约有15-16位有效数字。</li></ul></li><li>字符类型：<ul><li>char：字符，16位，用于表示单个Unicode字符。</li></ul></li><li>布尔类型：<ul><li>boolean：布尔值，表示true或false。</li></ul></li></ol><p><strong>引用数据类型</strong>（reference data types）：</p><ol><li>类（Class）：类是用户自定义的数据类型，可以包含字段（属性）和方法。例如：<code>String</code>、<code>ArrayList</code>、<code>Person</code>等。</li><li>接口（Interface）：接口定义了一组方法，类可以实现一个或多个接口。例如：<code>Serializable</code>、<code>Comparable</code>等。</li><li>数组（Array）：数组是一种引用数据类型，可以存储多个相同类型的数据元素。例如：<code>int[]</code>、<code>String[]</code>等。</li><li>枚举（Enum）：枚举是一种特殊的引用数据类型，用于定义一组有限的命名常量。例如：<code>enum Day &#123;SUNDAY, MONDAY, ...&#125;</code>。</li><li>包装类（Wrapper Classes）：Java提供了包装类来将基本数据类型封装成对象，例如：<code>Integer</code>、<code>Double</code>、<code>Boolean</code>等。</li><li>用户自定义类和自定义数据类型：开发者可以创建自己的类和数据类型，以满足特定需求。</li></ol><p>基本数据类型用于存储简单的数值，它们在内存中的存储方式不同于引用数据类型。基本数据类型直接存储数据值，而引用数据类型存储的是对实际数据对象的引用。这两种数据类型在Java中有不同的用途和特性。</p><p>小tip：1字节（Byte）等于8位（bit）</p><h3 id="4-Switch-case选择结构"><a href="#4-Switch-case选择结构" class="headerlink" title="4.Switch-case选择结构"></a>4.Switch-case选择结构</h3><p>根据表达式中的值，依次匹配case语句。一旦与某一个case中的常量相等，那么就执行此case中的执行语句，执行完此执行语句之后。</p><ul><li>情况1: 遇到break，则执行break后，跳出当前的switch-case结构</li><li>情况2: 没有遇到break，则继续执行其后的case中的执行语句。</li></ul><p>注意：</p><ul><li>switch中的表达式只能是特定的数据类型。如下: byte、short、char、int、枚举(JDK5.0新增) String(JDK7.0新增) </li><li>case 后都是跟的常量，使用表达式与这些常量做相等的判断，不能进行范围的判断。</li><li>不能跟boolean类型进行比较</li></ul><h3 id="5-do-while循环"><a href="#5-do-while循环" class="headerlink" title="5.do-while循环"></a>5.do-while循环</h3><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token number">3.</span>    <span class="token number">4.</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">2.</span><span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>执行顺序1 -&gt; 3 -&gt; 4 -&gt; 2。</p><p>说明：</p><p>do-while循环至少执行一次循环体：哪怕刚开始不满足while中的条件，也会执行do中的语句一次</p><h3 id="6-break和continue的说明"><a href="#6-break和continue的说明" class="headerlink" title="6.break和continue的说明"></a>6.break和continue的说明</h3><p>break：使用范围在switch-case循环中，结束或跳出当前循环</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出的是1，2，3，到4的时候直接跳出循环</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>continue： 使用范围在循环结构中，结束或跳出本次循环</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//输出的是1，2，3，5，6，7，8，9，10  4的时候直接跳过本次循环，所以没有4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h2 id="二、数组"><a href="#二、数组" class="headerlink" title="二、数组"></a>二、数组</h2><h3 id="1-数组的特点"><a href="#1-数组的特点" class="headerlink" title="1.数组的特点"></a>1.数组的特点</h3><ul><li>数组中的元素在内存中是依次紧密排列的，有序的。</li><li>数组，属于引用数据类型的变量。数组的元素，既可以是基本数据类型，也可以引用数据类型。</li></ul><h3 id="2-初始化方式"><a href="#2-初始化方式" class="headerlink" title="2.初始化方式"></a>2.初始化方式</h3><p>静态初始化</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span>prices <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">20.1</span><span class="token punctuation">,</span><span class="token number">3.11</span><span class="token punctuation">,</span><span class="token number">34.22</span><span class="token punctuation">,</span><span class="token number">32.22</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>动态初始化</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>foods <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>3.Arrays工具类</p><ul><li><p>Arrays.equals()方法</p><figure><div class="code-wrapper"><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出false，因为比较的是地址值</span><span class="token keyword">boolean</span> isEquals <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>isEquals<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出的是true，因为比较的是内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li><li><p>Arrays.toString()方法</p><ul><li>直接将数组输出为字符串</li></ul></li><li><p>Arrays.sort()方法</p><ul><li>将数组排序（内部使用快速排序算法）</li></ul></li></ul><h2 id="三、面向对象"><a href="#三、面向对象" class="headerlink" title="三、面向对象"></a>三、面向对象</h2>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
