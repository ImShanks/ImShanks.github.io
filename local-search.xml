<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL-进阶篇</title>
    <link href="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/"/>
    <url>/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="一-MyISAM和InnoDB区别"><a href="#一-MyISAM和InnoDB区别" class="headerlink" title="一.MyISAM和InnoDB区别"></a>一.MyISAM和InnoDB区别</h3><ul><li><p>InnoDB 支持行级别的锁粒度，MyISAM 不支持，只支持表级别的锁粒度。</p></li><li><p>MyISAM 不提供事务支持。InnoDB 提供事务支持，实现了 SQL 标准定义了四个隔离级别。</p></li><li><p>MyISAM 不支持外键，而 InnoDB 支持。</p></li><li><p>MyISAM 不支持 MVCC，而 InnoDB 支持。</p></li><li><p>虽然 MyISAM 引擎和 InnoDB 引擎都是使用 B+Tree 作为索引结构，但是两者的实现方式不太一样。</p></li><li><p>MyISAM 不支持数据库异常崩溃后的安全恢复，而 InnoDB 支持。</p></li><li><p>InnoDB 的性能比 MyISAM 更强大。</p></li><li><p><strong>lnnoDB</strong>:是Mysal的默认存储引擎，支持事务、外键。如果应用对事务的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，那么InnoDB存储引擎是比较合适的选择。</p></li><li><p><strong>MyISAM</strong>:如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不是很高，那么选择这个存储引擎是非常合适的。    MyISAM目前有替换品MongoDB</p></li><li><p><strong>MEMORY</strong>:将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性。   MEMORY目前也有替换品那就是Redis</p></li></ul><h3 id="二-索引"><a href="#二-索引" class="headerlink" title="二.索引"></a>二.索引</h3><h4 id="1：索引的概念"><a href="#1：索引的概念" class="headerlink" title="1：索引的概念"></a>1：索引的概念</h4><p>索引(index)是帮助MySQL高效获取数据的数据结构(有序。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用(指向)数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><ul><li>索引会占据磁盘空间，索引可以提高查询效率，但是会降低更新数据的效率</li></ul><h4 id="2：索引的结构"><a href="#2：索引的结构" class="headerlink" title="2：索引的结构"></a>2：索引的结构</h4><p>按照数据结构维度划分：</p><ul><li>B+Tree 索引：MySQL 里默认和最常用的索引类型。只有叶子节点存储 value，非叶子节点只有指针和 key。存储引擎 MyISAM 和 InnoDB 实现 BTree 索引都是使用 B+Tree，但二者实现方式不一样（前面已经介绍了）。</li><li>哈希索引：类似键值对的形式，一次即可定位。</li><li>R-Tree 索引（空间索引）：一般不会使用，仅支持 geometry 数据类型，优势在于范围查找，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 CHAR、VARCHAR ，TEXT 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li></ul><p>按照底层存储方式角度划分：</p><ul><li>聚簇索引（聚集索引）：索引结构和数据一起存放的索引，InnoDB 中的主键索引就属于聚簇索引。  <strong>聚集索引指向的是数据</strong></li><li>非聚簇索引（非聚集索引）：索引结构和数据分开存放的索引，二级索引(辅助索引)就属于非聚簇索引。MySQL 的 MyISAM 引擎，不管主键还是非主键，使用的都是非聚簇索引。  <strong>二级索引指向的是索引</strong></li></ul><p>按照应用维度划分：</p><ul><li>主键索引：加速查询 + 列值唯一（不可以有 NULL）+ 表中只有一个。</li><li>普通索引：仅加速查询。</li><li>唯一索引：加速查询 + 列值唯一（可以有 NULL）。</li><li>覆盖索引：一个索引包含（或者说覆盖）所有需要查询的字段的值。</li><li>联合索引：多列值组成一个索引，专门用于组合搜索，其效率大于索引合并。</li><li>全文索引：对文本的内容进行分词，进行搜索。目前只有 <code>CHAR</code>、<code>VARCHAR</code> ，<code>TEXT</code> 列上可以创建全文索引。一般不会使用，效率较低，通常使用搜索引擎如 ElasticSearch 代替。</li></ul><p><img src="/2023/10/28/MySQL-%E8%BF%9B%E9%98%B6%E7%AF%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230922210947.png"></p><h4 id="3-InnoDB的默认索引结构是什么？（面试问过）"><a href="#3-InnoDB的默认索引结构是什么？（面试问过）" class="headerlink" title="3.InnoDB的默认索引结构是什么？（面试问过）"></a>3.InnoDB的默认索引结构是什么？（面试问过）</h4><p>InnoDB 存储引擎的默认索引结构是B+树（B-tree），它用于加速数据库表的查询操作。这种索引结构支持高效的数据插入、删除和查找操作，是MySQL中常用的索引类型之一。</p><p>为什么不用B树要用B+树？</p><ul><li><strong>更适合范围查询</strong>：B+树的叶子节点都连接成一个有序链表，这使得范围查询非常高效，因为数据在物理存储上是有序的。而B树在范围查询时可能需要进行额外的跳跃操作，效率较低。</li><li><strong>更好的磁盘IO性能</strong>：B+树的树高相对较低，因此在进行插入和删除操作时需要更少的磁盘IO。B树在树高相对较高时可能需要更多的IO操作，这会降低性能。</li><li><strong>更好的顺序访问性能</strong>：由于B+树的叶子节点形成有序链表，顺序访问数据更加高效。这对于某些查询和扫描操作非常重要。</li><li><strong>索引占用更少的内存</strong>：B+树的内部节点不保存数据记录的引用，只保存键值和子节点的信息，因此相比于B树，B+树索引占用更少的内存。</li></ul><h3 id="三-索引失效的情况"><a href="#三-索引失效的情况" class="headerlink" title="三.索引失效的情况"></a>三.索引失效的情况</h3><ol><li><strong>未使用索引列</strong>：当查询中的条件不是索引列时，索引将失效。例如，如果你有一个名为”age”的索引，但查询是基于名字而不是年龄的，索引将无效。</li><li><strong>使用函数或表达式</strong>：如果在查询中对列使用函数、表达式或计算，索引可能会失效。例如，<code>WHERE YEAR(date_column) = 2023</code> 可能导致索引失效，因为它对日期列进行了函数计算。</li><li><strong>模糊查询</strong>：模糊查询（如使用通配符%）通常会导致索引失效，因为数据库无法有效地利用索引来匹配通配符的位置。</li><li><strong>不等于条件</strong>：在某些情况下，使用不等于条件（例如，<code>!=</code> 或 <code>&lt;&gt;</code>）可能导致索引失效，因为它们不是等值条件。</li><li><strong>OR条件</strong>：包含多个OR条件的查询可能会导致索引失效，特别是这些条件没有被合理地组织。</li><li><strong>列顺序</strong>：索引的列顺序也很重要。如果查询的列顺序与索引的列顺序不匹配，索引可能会失效。</li><li><strong>大数据范围查询</strong>：在大数据表上执行范围查询（例如，大于、小于、介于等）可能会导致索引失效，因为数据库可能需要扫描大量的索引页。</li></ol><p>解决索引失效的方法包括：</p><ul><li>确保查询中使用了适当的索引列，并避免在索引列上使用函数或表达式。</li><li>优化查询语句，尽量避免模糊查询和OR条件。</li><li>确保索引的列顺序与查询中的列顺序匹配。</li><li>使用合适的索引类型（例如，B-tree、Hash、Full-text等），取决于查询的需求。</li><li>定期重新评估数据库的索引策略，根据实际查询模式进行调整</li></ul><h3 id="四-主键优化"><a href="#四-主键优化" class="headerlink" title="四.主键优化"></a>四.主键优化</h3><h4 id="1-数据组织方式"><a href="#1-数据组织方式" class="headerlink" title="1.数据组织方式"></a>1.数据组织方式</h4><p>在innoDB存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表(index organized table IOT）。</p><h4 id="2-页分裂"><a href="#2-页分裂" class="headerlink" title="2.页分裂"></a>2.页分裂</h4><p>页可以为空，也可以填充一半，也可以填充100%。每个页包含了2-N行数据(如果一行数据多大，会行溢出)，根据主键排列。</p><h4 id="3-页合并"><a href="#3-页合并" class="headerlink" title="3.页合并"></a>3.页合并</h4><ul><li>当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记(flaged)为删除并且它的空间变得允许被其他记录声明使用。</li><li>当页中删除的记录达到 MERGE THRESHOLD(默认为页的50%)，nnoDB会开始寻找最靠近的页(前或后)看看是否可以将两个页合并以优化空间使用。</li></ul><h4 id="4-主键设计原则"><a href="#4-主键设计原则" class="headerlink" title="4.主键设计原则"></a>4.主键设计原则</h4><ul><li>满足业务需求的情况下，尽量降低主键的长度</li><li>插入数据时，尽量选择顺序插入，选择使用AUTO_INCREMENT自增主键</li><li>尽量不要使用UUID做主键或者是其他自然主键，如身份证号</li><li>业务操作时，避免对主键的修改。</li></ul><h3 id="五、order-by优化"><a href="#五、order-by优化" class="headerlink" title="五、order by优化"></a>五、order by优化</h3>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL-基础篇</title>
    <link href="/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="1-事务的四大特性"><a href="#1-事务的四大特性" class="headerlink" title="1.事务的四大特性"></a>1.事务的四大特性</h3><ul><li>原子性 (Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性 (Consistency) : 事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation):数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability): 事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="2-并发事务问题"><a href="#2-并发事务问题" class="headerlink" title="2.并发事务问题"></a>2.并发事务问题</h3><ul><li>脏读（Dirty Read）：<ul><li>脏读是指一个事务读取了另一个事务尚未提交的数据。</li><li>想象一家银行，某人正在进行取款操作，但还没有完成整个事务。同时，另一个人查看了该账户余额，看到了取款事务中的临时减少，尽管最终可能会被取消。这个过程就像读取了“脏数据”，因为它可能是不准确的。</li></ul></li><li>幻读（Phantom Read）：<ul><li>幻读是指一个事务在两次查询之间，另一个事务插入了新的数据行，导致第一个事务看到了一个似乎出现了“幻影”数据的情况。</li><li>假设一个医院管理系统中有一个正在查看某个科室的病人数量的事务。当事务开始时，有10名患者，但在事务期间，另一个事务添加了一名新患者，导致第一个事务看到了11名患者，就好像出现了“幻影”患者一样。</li><li>假如另一个事务在id&#x3D;3的地方插入数据，然后我当前事务，就是我查的时候显示id&#x3D;3明明没有数据，插入的时候却显示已经存在</li></ul></li><li>不可重复读（Non-repeatable Read）：<ul><li>不可重复读是指在同一个事务中，两次读取相同数据时，第二次读取得到的数据与第一次读取不同，这是由于其他事务修改了数据。</li><li>假设一个网上商店的顾客正在查看购物车中的商品数量。当他第一次查看时，有5件商品。然后，在他下订单之前，另一个顾客购买了2件相同的商品，导致他第二次查看购物车时，商品数量变成了3件。这就是不可重复读，因为同一事务中的两次读取返回了不同的结果。</li></ul></li></ul><h5 id="幻读和不可重复读的区别"><a href="#幻读和不可重复读的区别" class="headerlink" title="幻读和不可重复读的区别"></a>幻读和不可重复读的区别</h5><ol><li>幻读（Phantom Read）：<ul><li>幻读通常与数据行的插入或删除操作有关。它发生在一个事务在两次查询之间，另一个事务插入了新的数据行，导致第一个事务看到了一个似乎出现了“幻影”数据的情况。</li><li>幻读强调的是在事务期间其他事务添加或删除了数据，从而导致看到不一致的结果。</li></ul></li><li>不可重复读（Non-repeatable Read）：<ul><li>不可重复读通常与数据行的更新操作有关。它发生在一个事务在两次查询之间，另一个事务修改了已经存在的数据行，导致第一个事务在两次读取之间看到不同的数据。</li><li>不可重复读强调的是在事务期间其他事务修改了数据，导致读取到的数据不一致。</li></ul></li></ol><h3 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3.事务隔离级别"></a>3.事务隔离级别</h3><p><img src="/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230921162142.png"></p><ol><li>读未提交（Read Uncommitted）：<ul><li>最低的隔离级别，允许一个事务读取另一个事务未提交的数据。</li><li>可能出现脏读、幻读和不可重复读等问题。</li></ul></li><li>读已提交（Read Committed）：<ul><li>允许一个事务只能读取已提交的数据，确保不会读取到未提交的数据。</li><li>虽然可以避免脏读，但仍然可能发生幻读和不可重复读。</li></ul></li><li>可重复读（Repeatable Read）：<ul><li>事务内的多次读取都会看到相同的数据快照，即使其他事务修改了数据也不会影响。</li><li>可以避免脏读和不可重复读，但仍然可能发生幻读。</li></ul></li><li>序列化（Serializable）：<ul><li>最高的隔离级别，确保事务之间没有并发问题，所有事务顺序执行。</li><li>可以避免脏读、幻读和不可重复读，但可能会影响性能。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>基础篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶-数据结构和集合源码</title>
    <link href="/2023/10/28/Java%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    <url>/2023/10/28/Java%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>数据结构，就是一种程序设计优化的方法论，研究数据的、逻辑结构、和物理结构以及它们之间相互关系并对这种结构定义相应的“运算，目的是加快程序的执行速度、减少内存占用的空间。</p><h3 id="1-2研究对象之一：数据间逻辑关系"><a href="#1-2研究对象之一：数据间逻辑关系" class="headerlink" title="1.2研究对象之一：数据间逻辑关系"></a>1.2研究对象之一：数据间逻辑关系</h3><ul><li>集合结构</li><li>线性结构:一对一关系</li><li>树形结构:一对多关系</li><li>图形结构:多对多关系</li></ul><h3 id="1-3-研究对象之二：数据的存储结构"><a href="#1-3-研究对象之二：数据的存储结构" class="headerlink" title="1.3 研究对象之二：数据的存储结构"></a>1.3 研究对象之二：数据的存储结构</h3><ul><li>数组结构</li><li>链式结构</li><li>索引结构</li><li>散列结构</li></ul><h3 id="1-3-研究对象之三：运算结构"><a href="#1-3-研究对象之三：运算结构" class="headerlink" title="1.3 研究对象之三：运算结构"></a>1.3 研究对象之三：运算结构</h3><h2 id="二、常见的存储结构"><a href="#二、常见的存储结构" class="headerlink" title="二、常见的存储结构"></a>二、常见的存储结构</h2><h3 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1  数组"></a>2.1  数组</h3><p>数组（Array）是一种线性数据结构，由一组连续的内存空间组成，用于存储相同类型的数据。数组可以通过索引直接访问任何元素，其读取和写入的时间复杂度均为 O(1)。</p><h3 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h3><p>链表（Linked List）是另一种常见的数据结构，它由一系列节点组成，每个节点包含数据部分和指向下一个节点的指针。链表分为单向链表和双向链表，其优点是可以高效地插入和删除元素，但访问特定位置的元素的时间复杂度较高。</p><h3 id="2-3-树"><a href="#2-3-树" class="headerlink" title="2.3 树"></a>2.3 树</h3><p>树（Tree）是一种层次化的数据结构，由节点和边组成。树结构具有根节点、子节点和父节点等概念。常见的树包括二叉树、二叉搜索树、平衡树等。树结构常用于搜索算法和数据检索中。</p><ul><li>二叉树（Binary Tree）：二叉树是每个节点最多只有两个子节点的树结构。通常分为左子树和右子树。二叉树的子树有左右之分，且次序不能颠倒。</li><li>二叉搜索树（Binary Search Tree）：二叉搜索树是一种特殊的二叉树，其中每个节点的左子树中的值都小于该节点的值，而右子树中的值都大于该节点的值。这使得二叉搜索树成为一种有效的数据结构，用于快速搜索、插入和删除操作。</li><li>平衡树（Balanced Tree）：平衡树是一种树，其中任意节点的两个子树的高度差不大于1。它的目的是为了维护树的平衡，从而保证树的查找、插入和删除等操作的效率。</li><li>B树（B-Tree）：B树是一种自平衡的树结构，通常用于组织文件系统和数据库中的数据。B树具有多个子树，允许每个节点有多个子节点。B树在处理大量数据时表现出良好的性能。</li><li>红黑树（Red-Black Tree）：红黑树是一种自平衡的二叉搜索树，它在每个节点上增加了一个存储位来表示节点的颜色，可以是红色或黑色。红黑树具有一些特定的规则来确保树始终保持平衡，从而保证了较高的性能。</li></ul><h3 id="2-4-栈"><a href="#2-4-栈" class="headerlink" title="2.4 栈"></a>2.4 栈</h3><p>栈（Stack）是一种遵循后进先出（LIFO）原则的数据结构。栈的插入和删除操作均发生在栈顶。常见的栈操作包括压栈（push）和弹栈（pop），用于许多计算机应用程序的实现，如表达式求值、函数调用等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stack</span>&#123;  <span class="hljs-comment">//用数组实现</span><br>    Object[] values;<br>    <span class="hljs-type">int</span> size ; <span class="hljs-comment">//记录存储的元素的个数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stack</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span>&#123;<br>        valus = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[length];<br>    &#125;<br>    <span class="hljs-comment">//入栈</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">push</span><span class="hljs-params">(Object ele)</span>&#123;<br>        <span class="hljs-keyword">if</span>(size &gt;= values.length)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈空间已满，入栈失败&quot;</span>);<br>        &#125;<br>        values[size] = ele;<br>        size ++;<br>    &#125;<br>    <span class="hljs-comment">//出栈</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">pop</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(size &lt; = <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;栈空间已空,出栈失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> values[size -<span class="hljs-number">1</span>];<br>        values[size-<span class="hljs-number">1</span>] = <span class="hljs-literal">null</span>;<br>        size --;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5队列"><a href="#2-5队列" class="headerlink" title="2.5队列"></a>2.5队列</h3><p>队列（Queue）是一种遵循先进先出（FIFO）原则的数据结构。队列的插入操作（入队）发生在队尾，删除操作（出队）发生在队首。队列常用于处理按顺序进行的任务，如打印任务、CPU任务调度等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Queue</span>&#123;  <span class="hljs-comment">//用数组实现</span><br>    Object [] values;<br>    <span class="hljs-type">int</span> size; <span class="hljs-comment">//记录存储的元素的个数</span><br>    <span class="hljs-comment">//入队</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(Object ele)</span>&#123;<br>        <span class="hljs-keyword">if</span>(size &gt; = valus.length)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列已满，添加失败&quot;</span>);<br>        &#125;<br>        values[size] = ele; <br>        size ++ ;<br>    &#125;<br>    <span class="hljs-comment">//出队</span><br>    <span class="hljs-keyword">public</span> Objext <span class="hljs-title function_">get</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">if</span>(size&lt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;队列已空，获取失败&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> values[<span class="hljs-number">0</span>];<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;i&lt; size;i++)&#123;<br>            values[i] = values[i+<span class="hljs-number">1</span>];<br>        &#125;<br>        <span class="hljs-comment">//最后一个元素置空</span><br>        values[size -<span class="hljs-number">1</span> ] = <span class="hljs-literal">null</span>;<br>        size--;<br>        <span class="hljs-keyword">return</span> obj;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>集合源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天机学堂-基础环境搭建</title>
    <link href="/2023/10/28/tianji/"/>
    <url>/2023/10/28/tianji/</url>
    
    <content type="html"><![CDATA[<h2 id="1、写在最前"><a href="#1、写在最前" class="headerlink" title="1、写在最前"></a>1、写在最前</h2><ul><li>完整项目地址：</li></ul><h2 id="2、项目背景"><a href="#2、项目背景" class="headerlink" title="2、项目背景"></a>2、项目背景</h2><h3 id="2-1-在线教育市场环境"><a href="#2-1-在线教育市场环境" class="headerlink" title="2.1 在线教育市场环境"></a>2.1 在线教育市场环境</h3><h3 id="2-2-项目背景"><a href="#2-2-项目背景" class="headerlink" title="2.2 项目背景"></a>2.2 项目背景</h3><h2 id="3、项目介绍"><a href="#3、项目介绍" class="headerlink" title="3、项目介绍"></a>3、项目介绍</h2><h3 id="3-1-项目介绍"><a href="#3-1-项目介绍" class="headerlink" title="3.1 项目介绍"></a>3.1 项目介绍</h3><h3 id="3-2-功能模块与演示"><a href="#3-2-功能模块与演示" class="headerlink" title="3.2 功能模块与演示"></a>3.2 功能模块与演示</h3><h3 id="3-3-面试"><a href="#3-3-面试" class="headerlink" title="3.3 面试"></a>3.3 面试</h3><h2 id="4、项目技术架构"><a href="#4、项目技术架构" class="headerlink" title="4、项目技术架构"></a>4、项目技术架构</h2><h3 id="4-1项目技术架构"><a href="#4-1项目技术架构" class="headerlink" title="4.1项目技术架构"></a>4.1项目技术架构</h3><h3 id="4-2项目技术栈"><a href="#4-2项目技术栈" class="headerlink" title="4.2项目技术栈"></a>4.2项目技术栈</h3><h2 id="5、项目开发环境搭建"><a href="#5、项目开发环境搭建" class="headerlink" title="5、项目开发环境搭建"></a>5、项目开发环境搭建</h2><p>5.1项目工程搭建</p>]]></content>
    
    
    <categories>
      
      <category>天机学堂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透，缓存击穿，缓存雪崩区别</title>
    <link href="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p>发现自己有时候明明已经做过了，可能是缺少回顾总结，过了几天这部分知识就会忘的一干二净，一点有记不住，还有这三个概念有时候确实不太能把他分清楚，面试的时候也有让自己说清楚，说的一塌糊涂，所以总结一下</p></blockquote><h2 id="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"><a href="#一、缓存穿透，缓存击穿，缓存雪崩简单的区别" class="headerlink" title="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"></a>一、缓存穿透，缓存击穿，缓存雪崩简单的区别</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会失效，请求都会打到数据库</p><p><strong>缓存击穿</strong>问题也叫做热点key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问回给瞬间的数据库带来巨大的冲击</p><p><strong>缓存雪崩</strong>是指同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><h2 id="二、缓存穿透"><a href="#二、缓存穿透" class="headerlink" title="二、缓存穿透"></a>二、缓存穿透</h2><p>缓存穿透常见的解决方案有两种：</p><h3 id="1-缓存空对象"><a href="#1-缓存空对象" class="headerlink" title="1.缓存空对象"></a>1.缓存空对象</h3><ul><li>优点：实现简单，维护简单</li><li>缺点：额外的内存消耗，可能造成短期的不一致</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919213949.png" alt="微信截图_20230919213949"></p><h3 id="2-布隆过滤"><a href="#2-布隆过滤" class="headerlink" title="2.布隆过滤"></a>2.布隆过滤</h3><ul><li>优点：内存占用较少，没有多余的key</li><li>缺点：实现复杂，存在误判的可能</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214158.png" alt="微信截图_20230919214158"></p><p>3.解决缓存穿透的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(</span><br><span class="hljs-params">          String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallBack,Long time ,TimeUnit unit)</span>&#123;<br>      <span class="hljs-comment">//1.查询缓存</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>      <span class="hljs-comment">//2.判断缓存是否存在</span><br>      <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(Json))&#123;<br>          <span class="hljs-comment">//2.1 如果存在则直接返回数据给用户</span><br>          <span class="hljs-keyword">return</span> JSONUtil.toBean(Json,type);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(Json != <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//3.缓存不存在，查询数据库</span><br>      <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallBack.apply(id);<br>      <span class="hljs-comment">//3.1如果数据库中也不存在，则返回错误信息</span><br>      <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-comment">//将一个“”空字符串直接存到redis中</span><br>          stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-comment">//4.将数据库中的数据存入redis</span><br>     <span class="hljs-built_in">this</span>.set(key,r,time,unit);<br>      <span class="hljs-comment">//5.返回</span><br>      <span class="hljs-keyword">return</span> r;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="三、缓存击穿"><a href="#三、缓存击穿" class="headerlink" title="三、缓存击穿"></a>三、缓存击穿</h2><p>缓存击穿有两种常见的解决方法：</p><h3 id="1-互斥锁"><a href="#1-互斥锁" class="headerlink" title="1.互斥锁"></a>1.互斥锁</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214726.png" alt="微信截图_20230919214726"></p><h3 id="2-逻辑过期"><a href="#2-逻辑过期" class="headerlink" title="2.逻辑过期"></a>2.逻辑过期</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214744.png" alt="微信截图_20230919214744"></p><h3 id="3-两者的优缺点"><a href="#3-两者的优缺点" class="headerlink" title="3.两者的优缺点"></a>3.两者的优缺点</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214832.png" alt="微信截图_20230919214832"></p><h3 id="4-互斥锁的代码实现"><a href="#4-互斥锁的代码实现" class="headerlink" title="4.互斥锁的代码实现"></a>4.互斥锁的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919215243.png" alt="微信截图_20230919215243"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyprefix,String lockKeyPrefix,ID id,Class&lt;R&gt;type,Function&lt;ID,R&gt;dbFallBack,Long time ,TimeUnit unit)</span>  &#123;<br>        <span class="hljs-comment">//1.查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyprefix + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断缓存是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(Json))&#123;<br>            <span class="hljs-comment">//2.1 如果存在则直接返回数据给用户</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(Json,type);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(Json != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//当缓存的内容不是空字符串&quot;&quot;的时候</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2.2 缓存不是空字符串&quot;&quot;，而是不存在时进行缓存重建</span><br>        <span class="hljs-comment">//3.缓存重建</span><br>        <span class="hljs-comment">//3.1获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> lockKeyPrefix +id;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>            <span class="hljs-comment">//3.2判断是否获取互斥锁成功</span><br>            <span class="hljs-keyword">if</span>(!flag)&#123;<br>                <span class="hljs-comment">//获取互斥锁失败</span><br>                <span class="hljs-comment">//3.3失败则休眠并且重试</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-keyword">return</span> queryWithMutex(keyprefix,lockKeyPrefix,id,type,dbFallBack,time,unit);<br>            &#125;<br>            <span class="hljs-comment">//3.4成功则进行查询数据库</span><br>            <span class="hljs-comment">//4.缓存不存在，查询数据库</span><br>            r = dbFallBack.apply(id);<br><br><br>            <span class="hljs-comment">//模拟重建的延时</span><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-comment">//4.1如果数据库中也不存在，则返回错误信息</span><br>            <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">null</span>)&#123;<br>                stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//5.将数据库中的数据存入redis</span><br>            stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(r),time, unit);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放互斥锁</span><br>            unLock(lockKey);<br>        &#125;<br><br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span>&#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-逻辑过期的代码实现"><a href="#5-逻辑过期的代码实现" class="headerlink" title="5.逻辑过期的代码实现"></a>5.逻辑过期的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919220624.png" alt="微信截图_20230919220624"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(</span><br><span class="hljs-params">           String keyprefix,String lockKeyPrefix,ID id,Class&lt;R&gt;type,Function&lt;ID,R&gt;dbFallBack,Long time ,TimeUnit unit)</span>&#123;<br>       <span class="hljs-comment">//1.查询缓存</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyprefix + id;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>       <span class="hljs-comment">//2.判断缓存是否为空</span><br>       <span class="hljs-keyword">if</span>(StrUtil.isBlank(Json))&#123;<br>           <span class="hljs-comment">//Json为空，直接返回给用户null</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-comment">//2.1命中，需要先把json反序列化为对象</span><br>       <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(Json, RedisData.class);<br>       <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>       <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>       <span class="hljs-comment">//2.2判断逻辑时间是否已经过期</span><br>       <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>           <span class="hljs-comment">//expireTime在当前时间之后，说明还没过期</span><br>           <span class="hljs-keyword">return</span> r;<br>       &#125;<br>       <span class="hljs-comment">//3当逻辑时间已经过期,需要缓存重建</span><br>       <span class="hljs-comment">//3.1获取互斥锁</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> lockKeyPrefix + id;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>       <span class="hljs-comment">//判断是否获取锁成功</span><br>       <span class="hljs-keyword">if</span>( flag)&#123;<br>           <span class="hljs-comment">//开启缓存重建,开启独立线程重建</span><br>           CACHE_REBULID_EXECUTOR.submit(()-&gt;&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">//先查数据库</span><br>                   <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallBack.apply(id);<br>                   <span class="hljs-comment">//2.封装逻辑过期时间</span><br>                   RedisData redisData1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>                   redisData1.setData(r1);<br>                   redisData1.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>                   <span class="hljs-comment">//再写入Redis</span><br>                   stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(redisData));<br><br>               &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>               &#125;<span class="hljs-keyword">finally</span> &#123;<br>                   <span class="hljs-comment">//释放锁</span><br>                   unLock(lockKey);<br>               &#125;<br>           &#125;);<br>       &#125;<br>       <span class="hljs-comment">//4.返回</span><br>       <span class="hljs-keyword">return</span> r;<br>   &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 开启锁</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>       <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);<br>       <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 解锁</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span>&#123;<br>       stringRedisTemplate.delete(key);<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、缓存雪崩"><a href="#四、缓存雪崩" class="headerlink" title="四、缓存雪崩"></a>四、缓存雪崩</h2><p>1.<strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>2.<strong>解决方案</strong>:</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
