<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MySQL-基础篇</title>
    <link href="/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h3 id="1-事务的四大特性"><a href="#1-事务的四大特性" class="headerlink" title="1.事务的四大特性"></a>1.事务的四大特性</h3><ul><li>原子性 (Atomicity): 事务是不可分割的最小操作单元，要么全部成功，要么全部失败。</li><li>一致性 (Consistency) : 事务完成时，必须使所有的数据都保持一致状态。</li><li>隔离性(lsolation):数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。</li><li>持久性(Durability): 事务一旦提交或回滚，它对数据库中的数据的改变就是永久的。</li></ul><h3 id="2-并发事务问题"><a href="#2-并发事务问题" class="headerlink" title="2.并发事务问题"></a>2.并发事务问题</h3><ul><li>脏读（Dirty Read）：<ul><li>脏读是指一个事务读取了另一个事务尚未提交的数据。</li><li>想象一家银行，某人正在进行取款操作，但还没有完成整个事务。同时，另一个人查看了该账户余额，看到了取款事务中的临时减少，尽管最终可能会被取消。这个过程就像读取了“脏数据”，因为它可能是不准确的。</li></ul></li><li>幻读（Phantom Read）：<ul><li>幻读是指一个事务在两次查询之间，另一个事务插入了新的数据行，导致第一个事务看到了一个似乎出现了“幻影”数据的情况。</li><li>假设一个医院管理系统中有一个正在查看某个科室的病人数量的事务。当事务开始时，有10名患者，但在事务期间，另一个事务添加了一名新患者，导致第一个事务看到了11名患者，就好像出现了“幻影”患者一样。</li><li>假如另一个事务在id&#x3D;3的地方插入数据，然后我当前事务，就是我查的时候显示id&#x3D;3明明没有数据，插入的时候却显示已经存在</li></ul></li><li>不可重复读（Non-repeatable Read）：<ul><li>不可重复读是指在同一个事务中，两次读取相同数据时，第二次读取得到的数据与第一次读取不同，这是由于其他事务修改了数据。</li><li>假设一个网上商店的顾客正在查看购物车中的商品数量。当他第一次查看时，有5件商品。然后，在他下订单之前，另一个顾客购买了2件相同的商品，导致他第二次查看购物车时，商品数量变成了3件。这就是不可重复读，因为同一事务中的两次读取返回了不同的结果。</li></ul></li></ul><h5 id="幻读和不可重复读的区别"><a href="#幻读和不可重复读的区别" class="headerlink" title="幻读和不可重复读的区别"></a>幻读和不可重复读的区别</h5><ol><li>幻读（Phantom Read）：<ul><li>幻读通常与数据行的插入或删除操作有关。它发生在一个事务在两次查询之间，另一个事务插入了新的数据行，导致第一个事务看到了一个似乎出现了“幻影”数据的情况。</li><li>幻读强调的是在事务期间其他事务添加或删除了数据，从而导致看到不一致的结果。</li></ul></li><li>不可重复读（Non-repeatable Read）：<ul><li>不可重复读通常与数据行的更新操作有关。它发生在一个事务在两次查询之间，另一个事务修改了已经存在的数据行，导致第一个事务在两次读取之间看到不同的数据。</li><li>不可重复读强调的是在事务期间其他事务修改了数据，导致读取到的数据不一致。</li></ul></li></ol><h3 id="3-事务隔离级别"><a href="#3-事务隔离级别" class="headerlink" title="3.事务隔离级别"></a>3.事务隔离级别</h3><p><img src="/2023/10/28/MySQL-%E5%9F%BA%E7%A1%80%E7%AF%87/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20230921162142.png"></p><ol><li>读未提交（Read Uncommitted）：<ul><li>最低的隔离级别，允许一个事务读取另一个事务未提交的数据。</li><li>可能出现脏读、幻读和不可重复读等问题。</li></ul></li><li>读已提交（Read Committed）：<ul><li>允许一个事务只能读取已提交的数据，确保不会读取到未提交的数据。</li><li>虽然可以避免脏读，但仍然可能发生幻读和不可重复读。</li></ul></li><li>可重复读（Repeatable Read）：<ul><li>事务内的多次读取都会看到相同的数据快照，即使其他事务修改了数据也不会影响。</li><li>可以避免脏读和不可重复读，但仍然可能发生幻读。</li></ul></li><li>序列化（Serializable）：<ul><li>最高的隔离级别，确保事务之间没有并发问题，所有事务顺序执行。</li><li>可以避免脏读、幻读和不可重复读，但可能会影响性能。</li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>数据库</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
      <tag>基础篇</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java进阶-数据结构和集合源码</title>
    <link href="/2023/10/28/Java%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/"/>
    <url>/2023/10/28/Java%E8%BF%9B%E9%98%B6-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%92%8C%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="一、数据结构"><a href="#一、数据结构" class="headerlink" title="一、数据结构"></a>一、数据结构</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>数据结构，就是一种程序设计优化的方法论，研究数据的、逻辑结构、和物理结构以及它们之间相互关系并对这种结构定义相应的“运算，目的是加快程序的执行速度、减少内存占用的空间。</p><h3 id="1-2研究对象之一：数据间逻辑关系"><a href="#1-2研究对象之一：数据间逻辑关系" class="headerlink" title="1.2研究对象之一：数据间逻辑关系"></a>1.2研究对象之一：数据间逻辑关系</h3><ul><li>集合结构</li><li>线性结构:一对一关系</li><li>树形结构:一对多关系</li><li>图形结构:多对多关系</li></ul><h3 id="1-3-研究对象之二：数据的存储结构"><a href="#1-3-研究对象之二：数据的存储结构" class="headerlink" title="1.3 研究对象之二：数据的存储结构"></a>1.3 研究对象之二：数据的存储结构</h3><ul><li>数组结构</li><li>链式结构</li><li>索引结构</li><li>散列结构</li></ul><h3 id="1-3-研究对象之三：运算结构"><a href="#1-3-研究对象之三：运算结构" class="headerlink" title="1.3 研究对象之三：运算结构"></a>1.3 研究对象之三：运算结构</h3><h2 id="二、常见的存储结构"><a href="#二、常见的存储结构" class="headerlink" title="二、常见的存储结构"></a>二、常见的存储结构</h2><h3 id="2-1-数组"><a href="#2-1-数组" class="headerlink" title="2.1  数组"></a>2.1  数组</h3><h3 id="2-2-链表"><a href="#2-2-链表" class="headerlink" title="2.2 链表"></a>2.2 链表</h3><h3 id="2-3-树"><a href="#2-3-树" class="headerlink" title="2.3 树"></a>2.3 树</h3><h3 id="2-4-栈"><a href="#2-4-栈" class="headerlink" title="2.4 栈"></a>2.4 栈</h3><h3 id="2-5队列"><a href="#2-5队列" class="headerlink" title="2.5队列"></a>2.5队列</h3>]]></content>
    
    
    <categories>
      
      <category>Java进阶</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>数据结构</tag>
      
      <tag>集合源码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>天机学堂-基础环境搭建</title>
    <link href="/2023/10/28/tianji/"/>
    <url>/2023/10/28/tianji/</url>
    
    <content type="html"><![CDATA[<h2 id="1、写在最前"><a href="#1、写在最前" class="headerlink" title="1、写在最前"></a>1、写在最前</h2><ul><li>完整项目地址：</li></ul><h2 id="2、项目背景"><a href="#2、项目背景" class="headerlink" title="2、项目背景"></a>2、项目背景</h2><h3 id="2-1-在线教育市场环境"><a href="#2-1-在线教育市场环境" class="headerlink" title="2.1 在线教育市场环境"></a>2.1 在线教育市场环境</h3><h3 id="2-2-项目背景"><a href="#2-2-项目背景" class="headerlink" title="2.2 项目背景"></a>2.2 项目背景</h3><h2 id="3、项目介绍"><a href="#3、项目介绍" class="headerlink" title="3、项目介绍"></a>3、项目介绍</h2><h3 id="3-1-项目介绍"><a href="#3-1-项目介绍" class="headerlink" title="3.1 项目介绍"></a>3.1 项目介绍</h3><h3 id="3-2-功能模块与演示"><a href="#3-2-功能模块与演示" class="headerlink" title="3.2 功能模块与演示"></a>3.2 功能模块与演示</h3><h3 id="3-3-面试"><a href="#3-3-面试" class="headerlink" title="3.3 面试"></a>3.3 面试</h3><h2 id="4、项目技术架构"><a href="#4、项目技术架构" class="headerlink" title="4、项目技术架构"></a>4、项目技术架构</h2><h3 id="4-1项目技术架构"><a href="#4-1项目技术架构" class="headerlink" title="4.1项目技术架构"></a>4.1项目技术架构</h3><h3 id="4-2项目技术栈"><a href="#4-2项目技术栈" class="headerlink" title="4.2项目技术栈"></a>4.2项目技术栈</h3><h2 id="5、项目开发环境搭建"><a href="#5、项目开发环境搭建" class="headerlink" title="5、项目开发环境搭建"></a>5、项目开发环境搭建</h2><p>5.1项目工程搭建</p>]]></content>
    
    
    <categories>
      
      <category>天机学堂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>缓存穿透，缓存击穿，缓存雪崩区别</title>
    <link href="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<hr><blockquote><p>发现自己有时候明明已经做过了，可能是缺少回顾总结，过了几天这部分知识就会忘的一干二净，一点有记不住，还有这三个概念有时候确实不太能把他分清楚，面试的时候也有让自己说清楚，说的一塌糊涂，所以总结一下</p></blockquote><h2 id="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"><a href="#一、缓存穿透，缓存击穿，缓存雪崩简单的区别" class="headerlink" title="一、缓存穿透，缓存击穿，缓存雪崩简单的区别"></a>一、缓存穿透，缓存击穿，缓存雪崩简单的区别</h2><p><strong>缓存穿透</strong>是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远不会失效，请求都会打到数据库</p><p><strong>缓存击穿</strong>问题也叫做热点key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，无数的请求访问回给瞬间的数据库带来巨大的冲击</p><p><strong>缓存雪崩</strong>是指同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><h2 id="二、缓存穿透"><a href="#二、缓存穿透" class="headerlink" title="二、缓存穿透"></a>二、缓存穿透</h2><p>缓存穿透常见的解决方案有两种：</p><h3 id="1-缓存空对象"><a href="#1-缓存空对象" class="headerlink" title="1.缓存空对象"></a>1.缓存空对象</h3><ul><li>优点：实现简单，维护简单</li><li>缺点：额外的内存消耗，可能造成短期的不一致</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919213949.png" alt="微信截图_20230919213949"></p><h3 id="2-布隆过滤"><a href="#2-布隆过滤" class="headerlink" title="2.布隆过滤"></a>2.布隆过滤</h3><ul><li>优点：内存占用较少，没有多余的key</li><li>缺点：实现复杂，存在误判的可能</li></ul><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214158.png" alt="微信截图_20230919214158"></p><p>3.解决缓存穿透的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R,ID&gt; R <span class="hljs-title function_">queryWithPassThrough</span><span class="hljs-params">(</span><br><span class="hljs-params">          String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID,R&gt; dbFallBack,Long time ,TimeUnit unit)</span>&#123;<br>      <span class="hljs-comment">//1.查询缓存</span><br>      <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyPrefix + id;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>      <span class="hljs-comment">//2.判断缓存是否存在</span><br>      <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(Json))&#123;<br>          <span class="hljs-comment">//2.1 如果存在则直接返回数据给用户</span><br>          <span class="hljs-keyword">return</span> JSONUtil.toBean(Json,type);<br>      &#125;<br>      <span class="hljs-keyword">if</span>(Json != <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br><br>      <span class="hljs-comment">//3.缓存不存在，查询数据库</span><br>      <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> dbFallBack.apply(id);<br>      <span class="hljs-comment">//3.1如果数据库中也不存在，则返回错误信息</span><br>      <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">null</span>)&#123;<br>          <span class="hljs-comment">//将一个“”空字符串直接存到redis中</span><br>          stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>          <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>      &#125;<br>      <span class="hljs-comment">//4.将数据库中的数据存入redis</span><br>     <span class="hljs-built_in">this</span>.set(key,r,time,unit);<br>      <span class="hljs-comment">//5.返回</span><br>      <span class="hljs-keyword">return</span> r;<br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="三、缓存击穿"><a href="#三、缓存击穿" class="headerlink" title="三、缓存击穿"></a>三、缓存击穿</h2><p>缓存击穿有两种常见的解决方法：</p><h3 id="1-互斥锁"><a href="#1-互斥锁" class="headerlink" title="1.互斥锁"></a>1.互斥锁</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214726.png" alt="微信截图_20230919214726"></p><h3 id="2-逻辑过期"><a href="#2-逻辑过期" class="headerlink" title="2.逻辑过期"></a>2.逻辑过期</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214744.png" alt="微信截图_20230919214744"></p><h3 id="3-两者的优缺点"><a href="#3-两者的优缺点" class="headerlink" title="3.两者的优缺点"></a>3.两者的优缺点</h3><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919214832.png" alt="微信截图_20230919214832"></p><h3 id="4-互斥锁的代码实现"><a href="#4-互斥锁的代码实现" class="headerlink" title="4.互斥锁的代码实现"></a>4.互斥锁的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919215243.png" alt="微信截图_20230919215243"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">public</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithMutex</span><span class="hljs-params">(</span><br><span class="hljs-params">            String keyprefix,String lockKeyPrefix,ID id,Class&lt;R&gt;type,Function&lt;ID,R&gt;dbFallBack,Long time ,TimeUnit unit)</span>  &#123;<br>        <span class="hljs-comment">//1.查询缓存</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyprefix + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>        <span class="hljs-comment">//2.判断缓存是否存在</span><br>        <span class="hljs-keyword">if</span>(StrUtil.isNotBlank(Json))&#123;<br>            <span class="hljs-comment">//2.1 如果存在则直接返回数据给用户</span><br>            <span class="hljs-keyword">return</span> JSONUtil.toBean(Json,type);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(Json != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-comment">//当缓存的内容不是空字符串&quot;&quot;的时候</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//2.2 缓存不是空字符串&quot;&quot;，而是不存在时进行缓存重建</span><br>        <span class="hljs-comment">//3.缓存重建</span><br>        <span class="hljs-comment">//3.1获取互斥锁</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> lockKeyPrefix +id;<br>        <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>            <span class="hljs-comment">//3.2判断是否获取互斥锁成功</span><br>            <span class="hljs-keyword">if</span>(!flag)&#123;<br>                <span class="hljs-comment">//获取互斥锁失败</span><br>                <span class="hljs-comment">//3.3失败则休眠并且重试</span><br>                Thread.sleep(<span class="hljs-number">50</span>);<br>                <span class="hljs-keyword">return</span> queryWithMutex(keyprefix,lockKeyPrefix,id,type,dbFallBack,time,unit);<br>            &#125;<br>            <span class="hljs-comment">//3.4成功则进行查询数据库</span><br>            <span class="hljs-comment">//4.缓存不存在，查询数据库</span><br>            r = dbFallBack.apply(id);<br><br><br>            <span class="hljs-comment">//模拟重建的延时</span><br>            Thread.sleep(<span class="hljs-number">200</span>);<br><br>            <span class="hljs-comment">//4.1如果数据库中也不存在，则返回错误信息</span><br>            <span class="hljs-keyword">if</span>(r == <span class="hljs-literal">null</span>)&#123;<br>                stringRedisTemplate.opsForValue().set(key,<span class="hljs-string">&quot;&quot;</span>,CACHE_NULL_TTL,TimeUnit.MINUTES);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>            <span class="hljs-comment">//5.将数据库中的数据存入redis</span><br>            stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(r),time, unit);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//6.释放互斥锁</span><br>            unLock(lockKey);<br>        &#125;<br><br>        <span class="hljs-comment">//7.返回</span><br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 开启锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>        <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);<br>        <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解锁</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span>&#123;<br>        stringRedisTemplate.delete(key);<br>    &#125;<br><br></code></pre></td></tr></table></figure><h3 id="5-逻辑过期的代码实现"><a href="#5-逻辑过期的代码实现" class="headerlink" title="5.逻辑过期的代码实现"></a>5.逻辑过期的代码实现</h3><p>流程图</p><p><img src="/2023/10/28/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%8C%BA%E5%88%AB/workspace\ImShanks.github.io\source_posts\images\微信截图_20230919220624.png" alt="微信截图_20230919220624"></p><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;R,ID&gt;R <span class="hljs-title function_">queryWithLogicalExpire</span><span class="hljs-params">(</span><br><span class="hljs-params">           String keyprefix,String lockKeyPrefix,ID id,Class&lt;R&gt;type,Function&lt;ID,R&gt;dbFallBack,Long time ,TimeUnit unit)</span>&#123;<br>       <span class="hljs-comment">//1.查询缓存</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> keyprefix + id;<br>       <span class="hljs-type">String</span> <span class="hljs-variable">Json</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().get(key);<br>       <span class="hljs-comment">//2.判断缓存是否为空</span><br>       <span class="hljs-keyword">if</span>(StrUtil.isBlank(Json))&#123;<br>           <span class="hljs-comment">//Json为空，直接返回给用户null</span><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-comment">//2.1命中，需要先把json反序列化为对象</span><br>       <span class="hljs-type">RedisData</span> <span class="hljs-variable">redisData</span> <span class="hljs-operator">=</span> JSONUtil.toBean(Json, RedisData.class);<br>       <span class="hljs-type">R</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);<br>       <span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">expireTime</span> <span class="hljs-operator">=</span> redisData.getExpireTime();<br>       <span class="hljs-comment">//2.2判断逻辑时间是否已经过期</span><br>       <span class="hljs-keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;<br>           <span class="hljs-comment">//expireTime在当前时间之后，说明还没过期</span><br>           <span class="hljs-keyword">return</span> r;<br>       &#125;<br>       <span class="hljs-comment">//3当逻辑时间已经过期,需要缓存重建</span><br>       <span class="hljs-comment">//3.1获取互斥锁</span><br>       <span class="hljs-type">String</span> <span class="hljs-variable">lockKey</span> <span class="hljs-operator">=</span> lockKeyPrefix + id;<br>       <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> tryLock(lockKey);<br>       <span class="hljs-comment">//判断是否获取锁成功</span><br>       <span class="hljs-keyword">if</span>( flag)&#123;<br>           <span class="hljs-comment">//开启缓存重建,开启独立线程重建</span><br>           CACHE_REBULID_EXECUTOR.submit(()-&gt;&#123;<br>               <span class="hljs-keyword">try</span> &#123;<br>                   <span class="hljs-comment">//先查数据库</span><br>                   <span class="hljs-type">R</span> <span class="hljs-variable">r1</span> <span class="hljs-operator">=</span> dbFallBack.apply(id);<br>                   <span class="hljs-comment">//2.封装逻辑过期时间</span><br>                   RedisData redisData1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisData</span>();<br>                   redisData1.setData(r1);<br>                   redisData1.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));<br>                   <span class="hljs-comment">//再写入Redis</span><br>                   stringRedisTemplate.opsForValue().set(key,JSONUtil.toJsonStr(redisData));<br><br>               &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                   <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>               &#125;<span class="hljs-keyword">finally</span> &#123;<br>                   <span class="hljs-comment">//释放锁</span><br>                   unLock(lockKey);<br>               &#125;<br>           &#125;);<br>       &#125;<br>       <span class="hljs-comment">//4.返回</span><br>       <span class="hljs-keyword">return</span> r;<br>   &#125;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 开启锁</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">(String key)</span>&#123;<br>       <span class="hljs-type">Boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="hljs-string">&quot;1&quot;</span>, LOCK_SHOP_TTL, TimeUnit.SECONDS);<br>       <span class="hljs-keyword">return</span> BooleanUtil.isTrue(flag);<br>   &#125;<br><br>   <span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 解锁</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unLock</span><span class="hljs-params">(String key)</span>&#123;<br>       stringRedisTemplate.delete(key);<br>   &#125;<br><br></code></pre></td></tr></table></figure><h2 id="四、缓存雪崩"><a href="#四、缓存雪崩" class="headerlink" title="四、缓存雪崩"></a>四、缓存雪崩</h2><p>1.<strong>缓存雪崩</strong>是指在同一时段大量的缓存key同时失效或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力。</p><p>2.<strong>解决方案</strong>:</p><ul><li>给不同的Key的TTL添加随机值</li><li>利用Redis集群提高服务的可用性</li><li>给缓存业务添加降级限流策略</li><li>给业务添加多级缓存</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
